// Distributed System Emulator Dataflow API and Data Models 0.0.1
// License: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: onexdataflowapi.proto

package onexdataflowapi

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DataflowFlowProfile_L2ProtocolChoice_Enum int32

const (
	DataflowFlowProfile_L2ProtocolChoice_unspecified DataflowFlowProfile_L2ProtocolChoice_Enum = 0
	DataflowFlowProfile_L2ProtocolChoice_ethernet    DataflowFlowProfile_L2ProtocolChoice_Enum = 1
)

// Enum value maps for DataflowFlowProfile_L2ProtocolChoice_Enum.
var (
	DataflowFlowProfile_L2ProtocolChoice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ethernet",
	}
	DataflowFlowProfile_L2ProtocolChoice_Enum_value = map[string]int32{
		"unspecified": 0,
		"ethernet":    1,
	}
)

func (x DataflowFlowProfile_L2ProtocolChoice_Enum) Enum() *DataflowFlowProfile_L2ProtocolChoice_Enum {
	p := new(DataflowFlowProfile_L2ProtocolChoice_Enum)
	*p = x
	return p
}

func (x DataflowFlowProfile_L2ProtocolChoice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowFlowProfile_L2ProtocolChoice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdataflowapi_proto_enumTypes[0].Descriptor()
}

func (DataflowFlowProfile_L2ProtocolChoice_Enum) Type() protoreflect.EnumType {
	return &file_onexdataflowapi_proto_enumTypes[0]
}

func (x DataflowFlowProfile_L2ProtocolChoice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowFlowProfile_L2ProtocolChoice_Enum.Descriptor instead.
func (DataflowFlowProfile_L2ProtocolChoice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{16, 0, 0}
}

type DataflowFlowProfile_L4ProtocolChoice_Enum int32

const (
	DataflowFlowProfile_L4ProtocolChoice_unspecified DataflowFlowProfile_L4ProtocolChoice_Enum = 0
	DataflowFlowProfile_L4ProtocolChoice_tcp         DataflowFlowProfile_L4ProtocolChoice_Enum = 1
	DataflowFlowProfile_L4ProtocolChoice_udp         DataflowFlowProfile_L4ProtocolChoice_Enum = 2
)

// Enum value maps for DataflowFlowProfile_L4ProtocolChoice_Enum.
var (
	DataflowFlowProfile_L4ProtocolChoice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "tcp",
		2: "udp",
	}
	DataflowFlowProfile_L4ProtocolChoice_Enum_value = map[string]int32{
		"unspecified": 0,
		"tcp":         1,
		"udp":         2,
	}
)

func (x DataflowFlowProfile_L4ProtocolChoice_Enum) Enum() *DataflowFlowProfile_L4ProtocolChoice_Enum {
	p := new(DataflowFlowProfile_L4ProtocolChoice_Enum)
	*p = x
	return p
}

func (x DataflowFlowProfile_L4ProtocolChoice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowFlowProfile_L4ProtocolChoice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdataflowapi_proto_enumTypes[1].Descriptor()
}

func (DataflowFlowProfile_L4ProtocolChoice_Enum) Type() protoreflect.EnumType {
	return &file_onexdataflowapi_proto_enumTypes[1]
}

func (x DataflowFlowProfile_L4ProtocolChoice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowFlowProfile_L4ProtocolChoice_Enum.Descriptor instead.
func (DataflowFlowProfile_L4ProtocolChoice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{16, 1, 0}
}

type DataflowFlowProfileTcp_CongestionAlgorithm_Enum int32

const (
	DataflowFlowProfileTcp_CongestionAlgorithm_unspecified DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 0
	DataflowFlowProfileTcp_CongestionAlgorithm_bbr         DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 1
	DataflowFlowProfileTcp_CongestionAlgorithm_dctcp       DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 2
	DataflowFlowProfileTcp_CongestionAlgorithm_cubic       DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 3
	DataflowFlowProfileTcp_CongestionAlgorithm_reno        DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 4
)

// Enum value maps for DataflowFlowProfileTcp_CongestionAlgorithm_Enum.
var (
	DataflowFlowProfileTcp_CongestionAlgorithm_Enum_name = map[int32]string{
		0: "unspecified",
		1: "bbr",
		2: "dctcp",
		3: "cubic",
		4: "reno",
	}
	DataflowFlowProfileTcp_CongestionAlgorithm_Enum_value = map[string]int32{
		"unspecified": 0,
		"bbr":         1,
		"dctcp":       2,
		"cubic":       3,
		"reno":        4,
	}
)

func (x DataflowFlowProfileTcp_CongestionAlgorithm_Enum) Enum() *DataflowFlowProfileTcp_CongestionAlgorithm_Enum {
	p := new(DataflowFlowProfileTcp_CongestionAlgorithm_Enum)
	*p = x
	return p
}

func (x DataflowFlowProfileTcp_CongestionAlgorithm_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowFlowProfileTcp_CongestionAlgorithm_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdataflowapi_proto_enumTypes[2].Descriptor()
}

func (DataflowFlowProfileTcp_CongestionAlgorithm_Enum) Type() protoreflect.EnumType {
	return &file_onexdataflowapi_proto_enumTypes[2]
}

func (x DataflowFlowProfileTcp_CongestionAlgorithm_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowFlowProfileTcp_CongestionAlgorithm_Enum.Descriptor instead.
func (DataflowFlowProfileTcp_CongestionAlgorithm_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{18, 0, 0}
}

type L4PortRange_Choice_Enum int32

const (
	L4PortRange_Choice_unspecified  L4PortRange_Choice_Enum = 0
	L4PortRange_Choice_single_value L4PortRange_Choice_Enum = 1
	L4PortRange_Choice_range        L4PortRange_Choice_Enum = 2
)

// Enum value maps for L4PortRange_Choice_Enum.
var (
	L4PortRange_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "single_value",
		2: "range",
	}
	L4PortRange_Choice_Enum_value = map[string]int32{
		"unspecified":  0,
		"single_value": 1,
		"range":        2,
	}
)

func (x L4PortRange_Choice_Enum) Enum() *L4PortRange_Choice_Enum {
	p := new(L4PortRange_Choice_Enum)
	*p = x
	return p
}

func (x L4PortRange_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (L4PortRange_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdataflowapi_proto_enumTypes[3].Descriptor()
}

func (L4PortRange_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdataflowapi_proto_enumTypes[3]
}

func (x L4PortRange_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use L4PortRange_Choice_Enum.Descriptor instead.
func (L4PortRange_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{19, 0, 0}
}

type DataflowWorkloadItem_Choice_Enum int32

const (
	DataflowWorkloadItem_Choice_unspecified DataflowWorkloadItem_Choice_Enum = 0
	DataflowWorkloadItem_Choice_scatter     DataflowWorkloadItem_Choice_Enum = 1
	DataflowWorkloadItem_Choice_gather      DataflowWorkloadItem_Choice_Enum = 2
	DataflowWorkloadItem_Choice_all_reduce  DataflowWorkloadItem_Choice_Enum = 3
	DataflowWorkloadItem_Choice_loop        DataflowWorkloadItem_Choice_Enum = 4
	DataflowWorkloadItem_Choice_compute     DataflowWorkloadItem_Choice_Enum = 5
	DataflowWorkloadItem_Choice_broadcast   DataflowWorkloadItem_Choice_Enum = 6
)

// Enum value maps for DataflowWorkloadItem_Choice_Enum.
var (
	DataflowWorkloadItem_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "scatter",
		2: "gather",
		3: "all_reduce",
		4: "loop",
		5: "compute",
		6: "broadcast",
	}
	DataflowWorkloadItem_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"scatter":     1,
		"gather":      2,
		"all_reduce":  3,
		"loop":        4,
		"compute":     5,
		"broadcast":   6,
	}
)

func (x DataflowWorkloadItem_Choice_Enum) Enum() *DataflowWorkloadItem_Choice_Enum {
	p := new(DataflowWorkloadItem_Choice_Enum)
	*p = x
	return p
}

func (x DataflowWorkloadItem_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowWorkloadItem_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdataflowapi_proto_enumTypes[4].Descriptor()
}

func (DataflowWorkloadItem_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdataflowapi_proto_enumTypes[4]
}

func (x DataflowWorkloadItem_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowWorkloadItem_Choice_Enum.Descriptor instead.
func (DataflowWorkloadItem_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{23, 0, 0}
}

type DataflowAllReduceWorkload_Type_Enum int32

const (
	DataflowAllReduceWorkload_Type_unspecified DataflowAllReduceWorkload_Type_Enum = 0
	DataflowAllReduceWorkload_Type_ring        DataflowAllReduceWorkload_Type_Enum = 1
	DataflowAllReduceWorkload_Type_tree        DataflowAllReduceWorkload_Type_Enum = 2
	DataflowAllReduceWorkload_Type_butterfly   DataflowAllReduceWorkload_Type_Enum = 3
)

// Enum value maps for DataflowAllReduceWorkload_Type_Enum.
var (
	DataflowAllReduceWorkload_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ring",
		2: "tree",
		3: "butterfly",
	}
	DataflowAllReduceWorkload_Type_Enum_value = map[string]int32{
		"unspecified": 0,
		"ring":        1,
		"tree":        2,
		"butterfly":   3,
	}
)

func (x DataflowAllReduceWorkload_Type_Enum) Enum() *DataflowAllReduceWorkload_Type_Enum {
	p := new(DataflowAllReduceWorkload_Type_Enum)
	*p = x
	return p
}

func (x DataflowAllReduceWorkload_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowAllReduceWorkload_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdataflowapi_proto_enumTypes[5].Descriptor()
}

func (DataflowAllReduceWorkload_Type_Enum) Type() protoreflect.EnumType {
	return &file_onexdataflowapi_proto_enumTypes[5]
}

func (x DataflowAllReduceWorkload_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowAllReduceWorkload_Type_Enum.Descriptor instead.
func (DataflowAllReduceWorkload_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{27, 0, 0}
}

type DataflowComputeWorkload_Choice_Enum int32

const (
	DataflowComputeWorkload_Choice_unspecified DataflowComputeWorkload_Choice_Enum = 0
	DataflowComputeWorkload_Choice_simulated   DataflowComputeWorkload_Choice_Enum = 1
)

// Enum value maps for DataflowComputeWorkload_Choice_Enum.
var (
	DataflowComputeWorkload_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "simulated",
	}
	DataflowComputeWorkload_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"simulated":   1,
	}
)

func (x DataflowComputeWorkload_Choice_Enum) Enum() *DataflowComputeWorkload_Choice_Enum {
	p := new(DataflowComputeWorkload_Choice_Enum)
	*p = x
	return p
}

func (x DataflowComputeWorkload_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowComputeWorkload_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdataflowapi_proto_enumTypes[6].Descriptor()
}

func (DataflowComputeWorkload_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdataflowapi_proto_enumTypes[6]
}

func (x DataflowComputeWorkload_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowComputeWorkload_Choice_Enum.Descriptor instead.
func (DataflowComputeWorkload_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{28, 0, 0}
}

type OpenApiMsgOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiMsgOpt) Reset() {
	*x = OpenApiMsgOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiMsgOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiMsgOpt) ProtoMessage() {}

func (x *OpenApiMsgOpt) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiMsgOpt.ProtoReflect.Descriptor instead.
func (*OpenApiMsgOpt) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{0}
}

func (x *OpenApiMsgOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenApiFldOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default     string `protobuf:"bytes,10,opt,name=default,proto3" json:"default,omitempty"`
	Description string `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiFldOpt) Reset() {
	*x = OpenApiFldOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiFldOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiFldOpt) ProtoMessage() {}

func (x *OpenApiFldOpt) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiFldOpt.ProtoReflect.Descriptor instead.
func (*OpenApiFldOpt) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{1}
}

func (x *OpenApiFldOpt) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *OpenApiFldOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenApiSvcOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiSvcOpt) Reset() {
	*x = OpenApiSvcOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiSvcOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiSvcOpt) ProtoMessage() {}

func (x *OpenApiSvcOpt) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiSvcOpt.ProtoReflect.Descriptor instead.
func (*OpenApiSvcOpt) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{2}
}

func (x *OpenApiSvcOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenApiRpcOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiRpcOpt) Reset() {
	*x = OpenApiRpcOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiRpcOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiRpcOpt) ProtoMessage() {}

func (x *OpenApiRpcOpt) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiRpcOpt.ProtoReflect.Descriptor instead.
func (*OpenApiRpcOpt) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{3}
}

func (x *OpenApiRpcOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GlobalNamedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *GlobalNamedObject) Reset() {
	*x = GlobalNamedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalNamedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNamedObject) ProtoMessage() {}

func (x *GlobalNamedObject) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNamedObject.ProtoReflect.Descriptor instead.
func (*GlobalNamedObject) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{4}
}

func (x *GlobalNamedObject) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorDetails) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type WarningDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warnings []string `protobuf:"bytes,1,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *WarningDetails) Reset() {
	*x = WarningDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningDetails) ProtoMessage() {}

func (x *WarningDetails) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningDetails.ProtoReflect.Descriptor instead.
func (*WarningDetails) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{6}
}

func (x *WarningDetails) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts    []*Host   `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Dataflow *Dataflow `protobuf:"bytes,2,opt,name=dataflow,proto3,oneof" json:"dataflow,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{7}
}

func (x *Config) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Config) GetDataflow() *Dataflow {
	if x != nil {
		return x.Dataflow
	}
	return nil
}

type GetConfigDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigDetails) Reset() {
	*x = GetConfigDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigDetails) ProtoMessage() {}

func (x *GetConfigDetails) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigDetails.ProtoReflect.Descriptor instead.
func (*GetConfigDetails) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{8}
}

type ExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExperimentRequest) Reset() {
	*x = ExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentRequest) ProtoMessage() {}

func (x *ExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentRequest.ProtoReflect.Descriptor instead.
func (*ExperimentRequest) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{9}
}

type MetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{10}
}

type MetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jct         *float32                     `protobuf:"fixed32,1,opt,name=jct,proto3,oneof" json:"jct,omitempty"`
	FlowResults []*MetricsResponseFlowResult `protobuf:"bytes,2,rep,name=flow_results,json=flowResults,proto3" json:"flow_results,omitempty"`
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{11}
}

func (x *MetricsResponse) GetJct() float32 {
	if x != nil && x.Jct != nil {
		return *x.Jct
	}
	return 0
}

func (x *MetricsResponse) GetFlowResults() []*MetricsResponseFlowResult {
	if x != nil {
		return x.FlowResults
	}
	return nil
}

type MetricsResponseFlowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadName   *string                           `protobuf:"bytes,1,opt,name=workload_name,json=workloadName,proto3,oneof" json:"workload_name,omitempty"`
	FlowNumber     *int32                            `protobuf:"varint,2,opt,name=flow_number,json=flowNumber,proto3,oneof" json:"flow_number,omitempty"`
	FromHostName   *string                           `protobuf:"bytes,3,opt,name=from_host_name,json=fromHostName,proto3,oneof" json:"from_host_name,omitempty"`
	ToHostName     *string                           `protobuf:"bytes,4,opt,name=to_host_name,json=toHostName,proto3,oneof" json:"to_host_name,omitempty"`
	Fct            *float32                          `protobuf:"fixed32,5,opt,name=fct,proto3,oneof" json:"fct,omitempty"`
	FirstTimestamp *int32                            `protobuf:"varint,6,opt,name=first_timestamp,json=firstTimestamp,proto3,oneof" json:"first_timestamp,omitempty"`
	LastTimestamp  *int32                            `protobuf:"varint,7,opt,name=last_timestamp,json=lastTimestamp,proto3,oneof" json:"last_timestamp,omitempty"`
	BytesTx        *int32                            `protobuf:"varint,8,opt,name=bytes_tx,json=bytesTx,proto3,oneof" json:"bytes_tx,omitempty"`
	BytesRx        *int32                            `protobuf:"varint,9,opt,name=bytes_rx,json=bytesRx,proto3,oneof" json:"bytes_rx,omitempty"`
	TcpInfo        *MetricsResponseFlowResultTcpInfo `protobuf:"bytes,10,opt,name=tcp_info,json=tcpInfo,proto3,oneof" json:"tcp_info,omitempty"`
}

func (x *MetricsResponseFlowResult) Reset() {
	*x = MetricsResponseFlowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponseFlowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponseFlowResult) ProtoMessage() {}

func (x *MetricsResponseFlowResult) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponseFlowResult.ProtoReflect.Descriptor instead.
func (*MetricsResponseFlowResult) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{12}
}

func (x *MetricsResponseFlowResult) GetWorkloadName() string {
	if x != nil && x.WorkloadName != nil {
		return *x.WorkloadName
	}
	return ""
}

func (x *MetricsResponseFlowResult) GetFlowNumber() int32 {
	if x != nil && x.FlowNumber != nil {
		return *x.FlowNumber
	}
	return 0
}

func (x *MetricsResponseFlowResult) GetFromHostName() string {
	if x != nil && x.FromHostName != nil {
		return *x.FromHostName
	}
	return ""
}

func (x *MetricsResponseFlowResult) GetToHostName() string {
	if x != nil && x.ToHostName != nil {
		return *x.ToHostName
	}
	return ""
}

func (x *MetricsResponseFlowResult) GetFct() float32 {
	if x != nil && x.Fct != nil {
		return *x.Fct
	}
	return 0
}

func (x *MetricsResponseFlowResult) GetFirstTimestamp() int32 {
	if x != nil && x.FirstTimestamp != nil {
		return *x.FirstTimestamp
	}
	return 0
}

func (x *MetricsResponseFlowResult) GetLastTimestamp() int32 {
	if x != nil && x.LastTimestamp != nil {
		return *x.LastTimestamp
	}
	return 0
}

func (x *MetricsResponseFlowResult) GetBytesTx() int32 {
	if x != nil && x.BytesTx != nil {
		return *x.BytesTx
	}
	return 0
}

func (x *MetricsResponseFlowResult) GetBytesRx() int32 {
	if x != nil && x.BytesRx != nil {
		return *x.BytesRx
	}
	return 0
}

func (x *MetricsResponseFlowResult) GetTcpInfo() *MetricsResponseFlowResultTcpInfo {
	if x != nil {
		return x.TcpInfo
	}
	return nil
}

type MetricsResponseFlowResultTcpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rtt             *float32 `protobuf:"fixed32,1,opt,name=rtt,proto3,oneof" json:"rtt,omitempty"`
	RttVariance     *float32 `protobuf:"fixed32,2,opt,name=rtt_variance,json=rttVariance,proto3,oneof" json:"rtt_variance,omitempty"`
	Retransmissions *float32 `protobuf:"fixed32,3,opt,name=retransmissions,proto3,oneof" json:"retransmissions,omitempty"`
}

func (x *MetricsResponseFlowResultTcpInfo) Reset() {
	*x = MetricsResponseFlowResultTcpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponseFlowResultTcpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponseFlowResultTcpInfo) ProtoMessage() {}

func (x *MetricsResponseFlowResultTcpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponseFlowResultTcpInfo.ProtoReflect.Descriptor instead.
func (*MetricsResponseFlowResultTcpInfo) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{13}
}

func (x *MetricsResponseFlowResultTcpInfo) GetRtt() float32 {
	if x != nil && x.Rtt != nil {
		return *x.Rtt
	}
	return 0
}

func (x *MetricsResponseFlowResultTcpInfo) GetRttVariance() float32 {
	if x != nil && x.RttVariance != nil {
		return *x.RttVariance
	}
	return 0
}

func (x *MetricsResponseFlowResultTcpInfo) GetRetransmissions() float32 {
	if x != nil && x.Retransmissions != nil {
		return *x.Retransmissions
	}
	return 0
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Prefix  *int32 `protobuf:"varint,3,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{14}
}

func (x *Host) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Host) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Host) GetPrefix() int32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

type Dataflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostManagement []*DataflowHostManagement `protobuf:"bytes,1,rep,name=host_management,json=hostManagement,proto3" json:"host_management,omitempty"`
	Workload       []*DataflowWorkloadItem   `protobuf:"bytes,2,rep,name=workload,proto3" json:"workload,omitempty"`
	FlowProfiles   []*DataflowFlowProfile    `protobuf:"bytes,3,rep,name=flow_profiles,json=flowProfiles,proto3" json:"flow_profiles,omitempty"`
}

func (x *Dataflow) Reset() {
	*x = Dataflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataflow) ProtoMessage() {}

func (x *Dataflow) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataflow.ProtoReflect.Descriptor instead.
func (*Dataflow) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{15}
}

func (x *Dataflow) GetHostManagement() []*DataflowHostManagement {
	if x != nil {
		return x.HostManagement
	}
	return nil
}

func (x *Dataflow) GetWorkload() []*DataflowWorkloadItem {
	if x != nil {
		return x.Workload
	}
	return nil
}

func (x *Dataflow) GetFlowProfiles() []*DataflowFlowProfile {
	if x != nil {
		return x.FlowProfiles
	}
	return nil
}

type DataflowFlowProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataSize         int32                                      `protobuf:"varint,2,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	L2ProtocolChoice *DataflowFlowProfile_L2ProtocolChoice_Enum `protobuf:"varint,3,opt,name=l2_protocol_choice,json=l2ProtocolChoice,proto3,enum=onexdataflowapi.DataflowFlowProfile_L2ProtocolChoice_Enum,oneof" json:"l2_protocol_choice,omitempty"`
	Ethernet         *DataflowFlowProfileEthernet               `protobuf:"bytes,4,opt,name=ethernet,proto3,oneof" json:"ethernet,omitempty"`
	L4ProtocolChoice *DataflowFlowProfile_L4ProtocolChoice_Enum `protobuf:"varint,5,opt,name=l4_protocol_choice,json=l4ProtocolChoice,proto3,enum=onexdataflowapi.DataflowFlowProfile_L4ProtocolChoice_Enum,oneof" json:"l4_protocol_choice,omitempty"`
	Tcp              *DataflowFlowProfileTcp                    `protobuf:"bytes,6,opt,name=tcp,proto3,oneof" json:"tcp,omitempty"`
	Udp              *DataflowFlowProfileUdp                    `protobuf:"bytes,7,opt,name=udp,proto3,oneof" json:"udp,omitempty"`
}

func (x *DataflowFlowProfile) Reset() {
	*x = DataflowFlowProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfile) ProtoMessage() {}

func (x *DataflowFlowProfile) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfile.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfile) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{16}
}

func (x *DataflowFlowProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataflowFlowProfile) GetDataSize() int32 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *DataflowFlowProfile) GetL2ProtocolChoice() DataflowFlowProfile_L2ProtocolChoice_Enum {
	if x != nil && x.L2ProtocolChoice != nil {
		return *x.L2ProtocolChoice
	}
	return DataflowFlowProfile_L2ProtocolChoice_unspecified
}

func (x *DataflowFlowProfile) GetEthernet() *DataflowFlowProfileEthernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *DataflowFlowProfile) GetL4ProtocolChoice() DataflowFlowProfile_L4ProtocolChoice_Enum {
	if x != nil && x.L4ProtocolChoice != nil {
		return *x.L4ProtocolChoice
	}
	return DataflowFlowProfile_L4ProtocolChoice_unspecified
}

func (x *DataflowFlowProfile) GetTcp() *DataflowFlowProfileTcp {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *DataflowFlowProfile) GetUdp() *DataflowFlowProfileUdp {
	if x != nil {
		return x.Udp
	}
	return nil
}

type DataflowFlowProfileEthernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu *int32 `protobuf:"varint,1,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
}

func (x *DataflowFlowProfileEthernet) Reset() {
	*x = DataflowFlowProfileEthernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfileEthernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfileEthernet) ProtoMessage() {}

func (x *DataflowFlowProfileEthernet) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfileEthernet.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfileEthernet) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{17}
}

func (x *DataflowFlowProfileEthernet) GetMtu() int32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

type DataflowFlowProfileTcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Congestionalgorithm *DataflowFlowProfileTcp_CongestionAlgorithm_Enum `protobuf:"varint,1,opt,name=congestionalgorithm,proto3,enum=onexdataflowapi.DataflowFlowProfileTcp_CongestionAlgorithm_Enum,oneof" json:"congestionalgorithm,omitempty"`
	Initcwnd            *int32                                           `protobuf:"varint,2,opt,name=initcwnd,proto3,oneof" json:"initcwnd,omitempty"`
	Sendbuf             *int32                                           `protobuf:"varint,3,opt,name=sendbuf,proto3,oneof" json:"sendbuf,omitempty"`
	Receivebuf          *int32                                           `protobuf:"varint,4,opt,name=receivebuf,proto3,oneof" json:"receivebuf,omitempty"`
	Destinationport     *L4PortRange                                     `protobuf:"bytes,5,opt,name=destinationport,proto3,oneof" json:"destinationport,omitempty"`
	Sourceport          *L4PortRange                                     `protobuf:"bytes,6,opt,name=sourceport,proto3,oneof" json:"sourceport,omitempty"`
}

func (x *DataflowFlowProfileTcp) Reset() {
	*x = DataflowFlowProfileTcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfileTcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfileTcp) ProtoMessage() {}

func (x *DataflowFlowProfileTcp) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfileTcp.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfileTcp) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{18}
}

func (x *DataflowFlowProfileTcp) GetCongestionalgorithm() DataflowFlowProfileTcp_CongestionAlgorithm_Enum {
	if x != nil && x.Congestionalgorithm != nil {
		return *x.Congestionalgorithm
	}
	return DataflowFlowProfileTcp_CongestionAlgorithm_unspecified
}

func (x *DataflowFlowProfileTcp) GetInitcwnd() int32 {
	if x != nil && x.Initcwnd != nil {
		return *x.Initcwnd
	}
	return 0
}

func (x *DataflowFlowProfileTcp) GetSendbuf() int32 {
	if x != nil && x.Sendbuf != nil {
		return *x.Sendbuf
	}
	return 0
}

func (x *DataflowFlowProfileTcp) GetReceivebuf() int32 {
	if x != nil && x.Receivebuf != nil {
		return *x.Receivebuf
	}
	return 0
}

func (x *DataflowFlowProfileTcp) GetDestinationport() *L4PortRange {
	if x != nil {
		return x.Destinationport
	}
	return nil
}

func (x *DataflowFlowProfileTcp) GetSourceport() *L4PortRange {
	if x != nil {
		return x.Sourceport
	}
	return nil
}

type L4PortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice      *L4PortRange_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=onexdataflowapi.L4PortRange_Choice_Enum,oneof" json:"choice,omitempty"`
	SingleValue *L4PortRangeSingleValue  `protobuf:"bytes,2,opt,name=single_value,json=singleValue,proto3,oneof" json:"single_value,omitempty"`
	Range       *L4PortRangeRange        `protobuf:"bytes,3,opt,name=range,proto3,oneof" json:"range,omitempty"`
}

func (x *L4PortRange) Reset() {
	*x = L4PortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L4PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L4PortRange) ProtoMessage() {}

func (x *L4PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L4PortRange.ProtoReflect.Descriptor instead.
func (*L4PortRange) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{19}
}

func (x *L4PortRange) GetChoice() L4PortRange_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return L4PortRange_Choice_unspecified
}

func (x *L4PortRange) GetSingleValue() *L4PortRangeSingleValue {
	if x != nil {
		return x.SingleValue
	}
	return nil
}

func (x *L4PortRange) GetRange() *L4PortRangeRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type L4PortRangeSingleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *int32 `protobuf:"varint,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *L4PortRangeSingleValue) Reset() {
	*x = L4PortRangeSingleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L4PortRangeSingleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L4PortRangeSingleValue) ProtoMessage() {}

func (x *L4PortRangeSingleValue) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L4PortRangeSingleValue.ProtoReflect.Descriptor instead.
func (*L4PortRangeSingleValue) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{20}
}

func (x *L4PortRangeSingleValue) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type L4PortRangeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartValue *int32 `protobuf:"varint,1,opt,name=start_value,json=startValue,proto3,oneof" json:"start_value,omitempty"`
	Increment  *int32 `protobuf:"varint,2,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
}

func (x *L4PortRangeRange) Reset() {
	*x = L4PortRangeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L4PortRangeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L4PortRangeRange) ProtoMessage() {}

func (x *L4PortRangeRange) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L4PortRangeRange.ProtoReflect.Descriptor instead.
func (*L4PortRangeRange) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{21}
}

func (x *L4PortRangeRange) GetStartValue() int32 {
	if x != nil && x.StartValue != nil {
		return *x.StartValue
	}
	return 0
}

func (x *L4PortRangeRange) GetIncrement() int32 {
	if x != nil && x.Increment != nil {
		return *x.Increment
	}
	return 0
}

type DataflowFlowProfileUdp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowFlowProfileUdp) Reset() {
	*x = DataflowFlowProfileUdp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfileUdp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfileUdp) ProtoMessage() {}

func (x *DataflowFlowProfileUdp) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfileUdp.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfileUdp) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{22}
}

type DataflowWorkloadItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Choice    DataflowWorkloadItem_Choice_Enum `protobuf:"varint,2,opt,name=choice,proto3,enum=onexdataflowapi.DataflowWorkloadItem_Choice_Enum" json:"choice,omitempty"`
	Scatter   *DataflowScatterWorkload         `protobuf:"bytes,3,opt,name=scatter,proto3,oneof" json:"scatter,omitempty"`
	Gather    *DataflowGatherWorkload          `protobuf:"bytes,4,opt,name=gather,proto3,oneof" json:"gather,omitempty"`
	Loop      *DataflowLoopWorkload            `protobuf:"bytes,5,opt,name=loop,proto3,oneof" json:"loop,omitempty"`
	Compute   *DataflowComputeWorkload         `protobuf:"bytes,6,opt,name=compute,proto3,oneof" json:"compute,omitempty"`
	AllReduce *DataflowAllReduceWorkload       `protobuf:"bytes,7,opt,name=all_reduce,json=allReduce,proto3,oneof" json:"all_reduce,omitempty"`
	Broadcast *DataflowBroadcastWorkload       `protobuf:"bytes,8,opt,name=broadcast,proto3,oneof" json:"broadcast,omitempty"`
}

func (x *DataflowWorkloadItem) Reset() {
	*x = DataflowWorkloadItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowWorkloadItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowWorkloadItem) ProtoMessage() {}

func (x *DataflowWorkloadItem) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowWorkloadItem.ProtoReflect.Descriptor instead.
func (*DataflowWorkloadItem) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{23}
}

func (x *DataflowWorkloadItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataflowWorkloadItem) GetChoice() DataflowWorkloadItem_Choice_Enum {
	if x != nil {
		return x.Choice
	}
	return DataflowWorkloadItem_Choice_unspecified
}

func (x *DataflowWorkloadItem) GetScatter() *DataflowScatterWorkload {
	if x != nil {
		return x.Scatter
	}
	return nil
}

func (x *DataflowWorkloadItem) GetGather() *DataflowGatherWorkload {
	if x != nil {
		return x.Gather
	}
	return nil
}

func (x *DataflowWorkloadItem) GetLoop() *DataflowLoopWorkload {
	if x != nil {
		return x.Loop
	}
	return nil
}

func (x *DataflowWorkloadItem) GetCompute() *DataflowComputeWorkload {
	if x != nil {
		return x.Compute
	}
	return nil
}

func (x *DataflowWorkloadItem) GetAllReduce() *DataflowAllReduceWorkload {
	if x != nil {
		return x.AllReduce
	}
	return nil
}

func (x *DataflowWorkloadItem) GetBroadcast() *DataflowBroadcastWorkload {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

type DataflowScatterWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources         []string `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations    []string `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	FlowProfileName *string  `protobuf:"bytes,3,opt,name=flow_profile_name,json=flowProfileName,proto3,oneof" json:"flow_profile_name,omitempty"`
}

func (x *DataflowScatterWorkload) Reset() {
	*x = DataflowScatterWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowScatterWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowScatterWorkload) ProtoMessage() {}

func (x *DataflowScatterWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowScatterWorkload.ProtoReflect.Descriptor instead.
func (*DataflowScatterWorkload) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{24}
}

func (x *DataflowScatterWorkload) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *DataflowScatterWorkload) GetDestinations() []string {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *DataflowScatterWorkload) GetFlowProfileName() string {
	if x != nil && x.FlowProfileName != nil {
		return *x.FlowProfileName
	}
	return ""
}

type DataflowBroadcastWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources         []string `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations    []string `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	FlowProfileName *string  `protobuf:"bytes,3,opt,name=flow_profile_name,json=flowProfileName,proto3,oneof" json:"flow_profile_name,omitempty"`
}

func (x *DataflowBroadcastWorkload) Reset() {
	*x = DataflowBroadcastWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowBroadcastWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowBroadcastWorkload) ProtoMessage() {}

func (x *DataflowBroadcastWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowBroadcastWorkload.ProtoReflect.Descriptor instead.
func (*DataflowBroadcastWorkload) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{25}
}

func (x *DataflowBroadcastWorkload) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *DataflowBroadcastWorkload) GetDestinations() []string {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *DataflowBroadcastWorkload) GetFlowProfileName() string {
	if x != nil && x.FlowProfileName != nil {
		return *x.FlowProfileName
	}
	return ""
}

type DataflowGatherWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources         []string `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations    []string `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	FlowProfileName *string  `protobuf:"bytes,3,opt,name=flow_profile_name,json=flowProfileName,proto3,oneof" json:"flow_profile_name,omitempty"`
}

func (x *DataflowGatherWorkload) Reset() {
	*x = DataflowGatherWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowGatherWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowGatherWorkload) ProtoMessage() {}

func (x *DataflowGatherWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowGatherWorkload.ProtoReflect.Descriptor instead.
func (*DataflowGatherWorkload) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{26}
}

func (x *DataflowGatherWorkload) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *DataflowGatherWorkload) GetDestinations() []string {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *DataflowGatherWorkload) GetFlowProfileName() string {
	if x != nil && x.FlowProfileName != nil {
		return *x.FlowProfileName
	}
	return ""
}

type DataflowAllReduceWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes           []string                             `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	FlowProfileName *string                              `protobuf:"bytes,2,opt,name=flow_profile_name,json=flowProfileName,proto3,oneof" json:"flow_profile_name,omitempty"`
	Type            *DataflowAllReduceWorkload_Type_Enum `protobuf:"varint,3,opt,name=type,proto3,enum=onexdataflowapi.DataflowAllReduceWorkload_Type_Enum,oneof" json:"type,omitempty"`
}

func (x *DataflowAllReduceWorkload) Reset() {
	*x = DataflowAllReduceWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowAllReduceWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowAllReduceWorkload) ProtoMessage() {}

func (x *DataflowAllReduceWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowAllReduceWorkload.ProtoReflect.Descriptor instead.
func (*DataflowAllReduceWorkload) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{27}
}

func (x *DataflowAllReduceWorkload) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DataflowAllReduceWorkload) GetFlowProfileName() string {
	if x != nil && x.FlowProfileName != nil {
		return *x.FlowProfileName
	}
	return ""
}

func (x *DataflowAllReduceWorkload) GetType() DataflowAllReduceWorkload_Type_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DataflowAllReduceWorkload_Type_unspecified
}

type DataflowComputeWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes     []string                             `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Choice    *DataflowComputeWorkload_Choice_Enum `protobuf:"varint,2,opt,name=choice,proto3,enum=onexdataflowapi.DataflowComputeWorkload_Choice_Enum,oneof" json:"choice,omitempty"`
	Simulated *DataflowSimulatedComputeWorkload    `protobuf:"bytes,3,opt,name=simulated,proto3,oneof" json:"simulated,omitempty"`
}

func (x *DataflowComputeWorkload) Reset() {
	*x = DataflowComputeWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowComputeWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowComputeWorkload) ProtoMessage() {}

func (x *DataflowComputeWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowComputeWorkload.ProtoReflect.Descriptor instead.
func (*DataflowComputeWorkload) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{28}
}

func (x *DataflowComputeWorkload) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DataflowComputeWorkload) GetChoice() DataflowComputeWorkload_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return DataflowComputeWorkload_Choice_unspecified
}

func (x *DataflowComputeWorkload) GetSimulated() *DataflowSimulatedComputeWorkload {
	if x != nil {
		return x.Simulated
	}
	return nil
}

type DataflowSimulatedComputeWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *float32 `protobuf:"fixed32,1,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
}

func (x *DataflowSimulatedComputeWorkload) Reset() {
	*x = DataflowSimulatedComputeWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowSimulatedComputeWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowSimulatedComputeWorkload) ProtoMessage() {}

func (x *DataflowSimulatedComputeWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowSimulatedComputeWorkload.ProtoReflect.Descriptor instead.
func (*DataflowSimulatedComputeWorkload) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{29}
}

func (x *DataflowSimulatedComputeWorkload) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type DataflowLoopWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iterations *int32                  `protobuf:"varint,1,opt,name=iterations,proto3,oneof" json:"iterations,omitempty"`
	Children   []*DataflowWorkloadItem `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *DataflowLoopWorkload) Reset() {
	*x = DataflowLoopWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowLoopWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowLoopWorkload) ProtoMessage() {}

func (x *DataflowLoopWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowLoopWorkload.ProtoReflect.Descriptor instead.
func (*DataflowLoopWorkload) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{30}
}

func (x *DataflowLoopWorkload) GetIterations() int32 {
	if x != nil && x.Iterations != nil {
		return *x.Iterations
	}
	return 0
}

func (x *DataflowLoopWorkload) GetChildren() []*DataflowWorkloadItem {
	if x != nil {
		return x.Children
	}
	return nil
}

type DataflowHostManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName          string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	ManagementAddress string `protobuf:"bytes,2,opt,name=management_address,json=managementAddress,proto3" json:"management_address,omitempty"`
	NicName           string `protobuf:"bytes,3,opt,name=nic_name,json=nicName,proto3" json:"nic_name,omitempty"`
}

func (x *DataflowHostManagement) Reset() {
	*x = DataflowHostManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowHostManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowHostManagement) ProtoMessage() {}

func (x *DataflowHostManagement) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowHostManagement.ProtoReflect.Descriptor instead.
func (*DataflowHostManagement) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{31}
}

func (x *DataflowHostManagement) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *DataflowHostManagement) GetManagementAddress() string {
	if x != nil {
		return x.ManagementAddress
	}
	return ""
}

func (x *DataflowHostManagement) GetNicName() string {
	if x != nil {
		return x.NicName
	}
	return ""
}

type SetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{32}
}

func (x *SetConfigRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetConfigDetails *GetConfigDetails `protobuf:"bytes,1,opt,name=get_config_details,json=getConfigDetails,proto3" json:"get_config_details,omitempty"`
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{33}
}

func (x *GetConfigRequest) GetGetConfigDetails() *GetConfigDetails {
	if x != nil {
		return x.GetConfigDetails
	}
	return nil
}

type SetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *Config       `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ErrorDetails `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ErrorDetails `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *SetConfigResponse) Reset() {
	*x = SetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse) ProtoMessage() {}

func (x *SetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse.ProtoReflect.Descriptor instead.
func (*SetConfigResponse) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{34}
}

func (x *SetConfigResponse) GetStatusCode_200() *Config {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *SetConfigResponse) GetStatusCode_400() *ErrorDetails {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetConfigResponse) GetStatusCode_500() *ErrorDetails {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *Config       `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ErrorDetails `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ErrorDetails `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{35}
}

func (x *GetConfigResponse) GetStatusCode_200() *Config {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *GetConfigResponse) GetStatusCode_400() *ErrorDetails {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *GetConfigResponse) GetStatusCode_500() *ErrorDetails {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type RunExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentRequest *ExperimentRequest `protobuf:"bytes,1,opt,name=experiment_request,json=experimentRequest,proto3" json:"experiment_request,omitempty"`
}

func (x *RunExperimentRequest) Reset() {
	*x = RunExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunExperimentRequest) ProtoMessage() {}

func (x *RunExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunExperimentRequest.ProtoReflect.Descriptor instead.
func (*RunExperimentRequest) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{36}
}

func (x *RunExperimentRequest) GetExperimentRequest() *ExperimentRequest {
	if x != nil {
		return x.ExperimentRequest
	}
	return nil
}

type RunExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_400 *ErrorDetails   `protobuf:"bytes,1,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ErrorDetails   `protobuf:"bytes,2,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
	StatusCode_200 *WarningDetails `protobuf:"bytes,3,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
}

func (x *RunExperimentResponse) Reset() {
	*x = RunExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunExperimentResponse) ProtoMessage() {}

func (x *RunExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunExperimentResponse.ProtoReflect.Descriptor instead.
func (*RunExperimentResponse) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{37}
}

func (x *RunExperimentResponse) GetStatusCode_400() *ErrorDetails {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *RunExperimentResponse) GetStatusCode_500() *ErrorDetails {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

func (x *RunExperimentResponse) GetStatusCode_200() *WarningDetails {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

type GetMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsRequest *MetricsRequest `protobuf:"bytes,1,opt,name=metrics_request,json=metricsRequest,proto3" json:"metrics_request,omitempty"`
}

func (x *GetMetricsRequest) Reset() {
	*x = GetMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsRequest) ProtoMessage() {}

func (x *GetMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{38}
}

func (x *GetMetricsRequest) GetMetricsRequest() *MetricsRequest {
	if x != nil {
		return x.MetricsRequest
	}
	return nil
}

type GetMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *MetricsResponse `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ErrorDetails    `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ErrorDetails    `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *GetMetricsResponse) Reset() {
	*x = GetMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsResponse) ProtoMessage() {}

func (x *GetMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetMetricsResponse) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{39}
}

func (x *GetMetricsResponse) GetStatusCode_200() *MetricsResponse {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *GetMetricsResponse) GetStatusCode_400() *ErrorDetails {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *GetMetricsResponse) GetStatusCode_500() *ErrorDetails {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type DataflowFlowProfile_L2ProtocolChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowFlowProfile_L2ProtocolChoice) Reset() {
	*x = DataflowFlowProfile_L2ProtocolChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfile_L2ProtocolChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfile_L2ProtocolChoice) ProtoMessage() {}

func (x *DataflowFlowProfile_L2ProtocolChoice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfile_L2ProtocolChoice.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfile_L2ProtocolChoice) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{16, 0}
}

type DataflowFlowProfile_L4ProtocolChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowFlowProfile_L4ProtocolChoice) Reset() {
	*x = DataflowFlowProfile_L4ProtocolChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfile_L4ProtocolChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfile_L4ProtocolChoice) ProtoMessage() {}

func (x *DataflowFlowProfile_L4ProtocolChoice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfile_L4ProtocolChoice.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfile_L4ProtocolChoice) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{16, 1}
}

type DataflowFlowProfileTcp_CongestionAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowFlowProfileTcp_CongestionAlgorithm) Reset() {
	*x = DataflowFlowProfileTcp_CongestionAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfileTcp_CongestionAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfileTcp_CongestionAlgorithm) ProtoMessage() {}

func (x *DataflowFlowProfileTcp_CongestionAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfileTcp_CongestionAlgorithm.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfileTcp_CongestionAlgorithm) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{18, 0}
}

type L4PortRange_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *L4PortRange_Choice) Reset() {
	*x = L4PortRange_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L4PortRange_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L4PortRange_Choice) ProtoMessage() {}

func (x *L4PortRange_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L4PortRange_Choice.ProtoReflect.Descriptor instead.
func (*L4PortRange_Choice) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{19, 0}
}

type DataflowWorkloadItem_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowWorkloadItem_Choice) Reset() {
	*x = DataflowWorkloadItem_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowWorkloadItem_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowWorkloadItem_Choice) ProtoMessage() {}

func (x *DataflowWorkloadItem_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowWorkloadItem_Choice.ProtoReflect.Descriptor instead.
func (*DataflowWorkloadItem_Choice) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{23, 0}
}

type DataflowAllReduceWorkload_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowAllReduceWorkload_Type) Reset() {
	*x = DataflowAllReduceWorkload_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowAllReduceWorkload_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowAllReduceWorkload_Type) ProtoMessage() {}

func (x *DataflowAllReduceWorkload_Type) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowAllReduceWorkload_Type.ProtoReflect.Descriptor instead.
func (*DataflowAllReduceWorkload_Type) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{27, 0}
}

type DataflowComputeWorkload_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowComputeWorkload_Choice) Reset() {
	*x = DataflowComputeWorkload_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdataflowapi_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowComputeWorkload_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowComputeWorkload_Choice) ProtoMessage() {}

func (x *DataflowComputeWorkload_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdataflowapi_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowComputeWorkload_Choice.ProtoReflect.Descriptor instead.
func (*DataflowComputeWorkload_Choice) Descriptor() ([]byte, []int) {
	return file_onexdataflowapi_proto_rawDescGZIP(), []int{28, 0}
}

var file_onexdataflowapi_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*OpenApiMsgOpt)(nil),
		Field:         60001,
		Name:          "onexdataflowapi.msg_meta",
		Tag:           "bytes,60001,opt,name=msg_meta",
		Filename:      "onexdataflowapi.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*OpenApiFldOpt)(nil),
		Field:         60002,
		Name:          "onexdataflowapi.fld_meta",
		Tag:           "bytes,60002,opt,name=fld_meta",
		Filename:      "onexdataflowapi.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*OpenApiSvcOpt)(nil),
		Field:         60003,
		Name:          "onexdataflowapi.svc_meta",
		Tag:           "bytes,60003,opt,name=svc_meta",
		Filename:      "onexdataflowapi.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*OpenApiRpcOpt)(nil),
		Field:         60004,
		Name:          "onexdataflowapi.rpc_meta",
		Tag:           "bytes,60004,opt,name=rpc_meta",
		Filename:      "onexdataflowapi.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional onexdataflowapi.OpenApiMsgOpt msg_meta = 60001;
	E_MsgMeta = &file_onexdataflowapi_proto_extTypes[0]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional onexdataflowapi.OpenApiFldOpt fld_meta = 60002;
	E_FldMeta = &file_onexdataflowapi_proto_extTypes[1]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional onexdataflowapi.OpenApiSvcOpt svc_meta = 60003;
	E_SvcMeta = &file_onexdataflowapi_proto_extTypes[2]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional onexdataflowapi.OpenApiRpcOpt rpc_meta = 60004;
	E_RpcMeta = &file_onexdataflowapi_proto_extTypes[3]
)

var File_onexdataflowapi_proto protoreflect.FileDescriptor

var file_onexdataflowapi_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x70, 0x69, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x6e, 0x41, 0x70, 0x69, 0x46, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x70, 0x69, 0x53, 0x76, 0x63, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x6e, 0x41, 0x70, 0x69, 0x52, 0x70, 0x63, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01,
	0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0x92, 0xa6, 0x1d, 0x22, 0xa2, 0x01, 0x1f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x71, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x77, 0x0a, 0x0e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xed,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x3a, 0x21,
	0x8a, 0xa6, 0x1d, 0x1d, 0x52, 0x1b, 0x4f, 0x4e, 0x45, 0x78, 0x20, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x34,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x3a, 0x20, 0x8a, 0xa6, 0x1d, 0x1c, 0x52, 0x1a, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x35, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x8a, 0xa6, 0x1d, 0x1c, 0x52,
	0x1a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2f, 0x0a, 0x0e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x1d, 0x8a,
	0xa6, 0x1d, 0x19, 0x52, 0x17, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xf2, 0x01, 0x0a,
	0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x03, 0x6a, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x2b, 0x92,
	0xa6, 0x1d, 0x27, 0xa2, 0x01, 0x24, 0x6a, 0x6f, 0x62, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x73, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x0b, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x1e, 0x8a, 0xa6, 0x1d, 0x1a, 0x52,
	0x18, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x63,
	0x74, 0x22, 0x90, 0x08, 0x0a, 0x19, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4e, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x66, 0x72, 0x6f,
	0x6d, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0c,
	0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x48, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x03, 0x66, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x2c, 0x92, 0xa6, 0x1d, 0x28, 0xa2, 0x01, 0x25, 0x66,
	0x6c, 0x6f, 0x77, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x20, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x48, 0x04, 0x52, 0x03, 0x66, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x55,
	0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0x92, 0xa6, 0x1d, 0x23, 0xa2, 0x01, 0x20,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x48, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x26, 0x92,
	0xa6, 0x1d, 0x22, 0xa2, 0x01, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x20, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x48, 0x06, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x28, 0x92, 0xa6, 0x1d,
	0x24, 0xa2, 0x01, 0x21, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x72, 0x63, 0x20, 0x74,
	0x6f, 0x20, 0x64, 0x73, 0x74, 0x48, 0x07, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x92, 0xa6, 0x1d, 0x21, 0xa2, 0x01, 0x1e, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x73, 0x72, 0x63, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x64, 0x73, 0x74, 0x48, 0x08, 0x52, 0x07,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x77, 0x0a, 0x08, 0x74, 0x63,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x09, 0x52, 0x07, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x66, 0x63, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x63, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x03, 0x0a, 0x20, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x03, 0x72, 0x74, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x26, 0x92, 0xa6, 0x1d, 0x22, 0xa2, 0x01, 0x1f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x69, 0x70, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x48, 0x00,
	0x52, 0x03, 0x72, 0x74, 0x74, 0x88, 0x01, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x72, 0x74, 0x74,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x5f, 0x92, 0xa6, 0x1d, 0x5b, 0xa2, 0x01, 0x58, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x72,
	0x69, 0x70, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x2c, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x48, 0x01, 0x52, 0x0b, 0x72, 0x74, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x59, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x2a, 0x92, 0xa6, 0x1d,
	0x26, 0xa2, 0x01, 0x23, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x54, 0x43, 0x50, 0x20, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a,
	0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x54, 0x43, 0x50, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x6c,
	0x6f, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x74, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72,
	0x74, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xfd, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0xa6, 0x1d, 0x2a, 0xa2, 0x01, 0x27, 0x54,
	0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c,
	0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92,
	0xa6, 0x1d, 0x1f, 0xa2, 0x01, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f,
	0x73, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x25, 0x92, 0xa6, 0x1d,
	0x04, 0x52, 0x02, 0x32, 0x34, 0x92, 0xa6, 0x1d, 0x19, 0xa2, 0x01, 0x16, 0x54, 0x68, 0x65, 0x20,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x3a,
	0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22,
	0xf3, 0x02, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x76, 0x0a, 0x0f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77,
	0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x24,
	0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x30, 0x92,
	0xa6, 0x1d, 0x2c, 0xa2, 0x01, 0x29, 0x54, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20,
	0x75, 0x70, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x0d, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0a, 0x92, 0xa6, 0x1d, 0x06, 0xa2, 0x01, 0x03, 0x66,
	0x6f, 0x6f, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xe1, 0x07, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d,
	0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x6c,
	0x32, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x32,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x42, 0x20, 0x92, 0xa6, 0x1d, 0x1c, 0xa2, 0x01, 0x19, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x32, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x73, 0x0a, 0x08,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x24, 0x92, 0xa6,
	0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x01, 0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x6c, 0x34, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x20, 0x92, 0xa6, 0x1d, 0x1c,
	0xa2, 0x01, 0x19, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x10,
	0x6c, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x03, 0x52, 0x03, 0x74, 0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x03, 0x75, 0x64, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x64, 0x70, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x04, 0x52, 0x03, 0x75, 0x64, 0x70, 0x88, 0x01, 0x01, 0x1a,
	0x39, 0x0a, 0x10, 0x4c, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x01, 0x1a, 0x3d, 0x0a, 0x10, 0x4c, 0x34,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x29,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x10, 0x02, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x6c, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x34, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x63,
	0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x44, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x6d, 0x74, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0x92, 0xa6, 0x1d, 0x06, 0x52, 0x04, 0x31, 0x35,
	0x30, 0x30, 0x92, 0xa6, 0x1d, 0x1c, 0xa2, 0x01, 0x19, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x6e,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6,
	0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x74, 0x75, 0x22, 0xe6, 0x07, 0x0a, 0x16, 0x44, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x63, 0x70, 0x12, 0xd2, 0x02, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x42, 0xd8, 0x01, 0x92, 0xa6, 0x1d, 0x20, 0x52, 0x1e, 0x43, 0x6f, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x92, 0xa6, 0x1d, 0xaf, 0x01,
	0xa2, 0x01, 0xab, 0x01, 0x54, 0x68, 0x65, 0x20, 0x54, 0x43, 0x50, 0x20, 0x63, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x3a, 0x0a, 0x62, 0x62, 0x72, 0x20, 0x2d, 0x20, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65,
	0x63, 0x6b, 0x20, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x74, 0x72, 0x69, 0x70, 0x20, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0a, 0x64, 0x63, 0x74,
	0x63, 0x70, 0x20, 0x2d, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x20, 0x54, 0x43, 0x50, 0x0a, 0x63, 0x75, 0x62, 0x69, 0x63, 0x20, 0x2d, 0x20, 0x63, 0x75, 0x62,
	0x69, 0x63, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x72, 0x65, 0x6e, 0x6f,
	0x20, 0x2d, 0x20, 0x54, 0x43, 0x50, 0x20, 0x4e, 0x65, 0x77, 0x20, 0x52, 0x65, 0x6e, 0x6f, 0x48,
	0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x6e, 0x69,
	0x74, 0x63, 0x77, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0x92, 0xa6, 0x1d,
	0x1c, 0xa2, 0x01, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x01, 0x52,
	0x08, 0x69, 0x6e, 0x69, 0x74, 0x63, 0x77, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07,
	0x73, 0x65, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92,
	0xa6, 0x1d, 0x13, 0xa2, 0x01, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x48, 0x02, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x75,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x62,
	0x75, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0xa6, 0x1d, 0x16, 0xa2, 0x01,
	0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,
	0x73, 0x69, 0x7a, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x62,
	0x75, 0x66, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x24, 0x92, 0xa6,
	0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x04, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x48, 0x05, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x57, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x40, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x62, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x63,
	0x74, 0x63, 0x70, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x75, 0x62, 0x69, 0x63, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x6e, 0x6f, 0x10, 0x04, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f,
	0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x63, 0x77, 0x6e, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x75, 0x66,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x62, 0x75, 0x66, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0xdb, 0x03, 0x0a, 0x0b, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0x92, 0xa6,
	0x1d, 0x07, 0xa2, 0x01, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0b, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x1a, 0x3e, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10,
	0x02, 0x3a, 0x37, 0x8a, 0xa6, 0x1d, 0x33, 0x52, 0x31, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x20,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20,
	0x6f, 0x72, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70,
	0x6f, 0x72, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x16, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x92, 0xa6, 0x1d, 0x03,
	0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x10, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x92, 0xa6,
	0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x92,
	0xa6, 0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f,
	0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0x0a,
	0x16, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x55, 0x64, 0x70, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xc0, 0x08, 0x0a,
	0x14, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0xa6, 0x1d, 0x28, 0xa2, 0x01, 0x25, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x6c, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x20, 0x92, 0xa6, 0x1d, 0x1c,
	0xa2, 0x01, 0x19, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x06, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x24, 0x92, 0xa6,
	0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x01, 0x52, 0x06, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x64, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x6f,
	0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x04, 0x52, 0x09, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x73, 0x0a, 0x09, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x05, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x70, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x66, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x61,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x6c,
	0x6f, 0x6f, 0x70, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10,
	0x06, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22,
	0xe7, 0x02, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5a, 0x0a, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x40, 0x92, 0xa6,
	0x1d, 0x3c, 0xa2, 0x01, 0x39, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73,
	0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x41, 0x92,
	0xa6, 0x1d, 0x3d, 0xa2, 0x01, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f,
	0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e,
	0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0xa6, 0x1d, 0x19, 0xa2,
	0x01, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x23,
	0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x19, 0x44, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5a, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x40, 0x92, 0xa6, 0x1d, 0x3c, 0xa2, 0x01,
	0x39, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x41, 0x92, 0xa6, 0x1d, 0x3d, 0xa2,
	0x01, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0xa6, 0x1d, 0x19, 0xa2, 0x01, 0x16, 0x66, 0x6c,
	0x6f, 0x77, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f,
	0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x5a, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x40, 0x92, 0xa6, 0x1d, 0x3c, 0xa2, 0x01, 0x39, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0c,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x41, 0x92, 0xa6, 0x1d, 0x3d, 0xa2, 0x01, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0xa6, 0x1d, 0x19, 0xa2, 0x01, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xad,
	0x03, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d,
	0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0xa6, 0x1d, 0x19, 0xa2, 0x01, 0x16, 0x66, 0x6c, 0x6f, 0x77,
	0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x7c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x2d, 0x92, 0xa6,
	0x1d, 0x10, 0x52, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x72, 0x69,
	0x6e, 0x67, 0x92, 0xa6, 0x1d, 0x15, 0xa2, 0x01, 0x12, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x42, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x62,
	0x75, 0x74, 0x74, 0x65, 0x72, 0x66, 0x6c, 0x79, 0x10, 0x03, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f,
	0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xac,
	0x03, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x16, 0x92, 0xa6,
	0x1d, 0x12, 0xa2, 0x01, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x7a, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52,
	0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x30, 0x0a,
	0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x26, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x3a,
	0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x20, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x5d, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x3c, 0x92, 0xa6, 0x1d, 0x38, 0xa2, 0x01, 0x35, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x20, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x99, 0x02, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77,
	0x4c, 0x6f, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4c, 0x0a, 0x0a,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x27, 0x92, 0xa6, 0x1d, 0x23, 0xa2, 0x01, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x42, 0x3c, 0x92, 0xa6, 0x1d, 0x38, 0xa2, 0x01, 0x35, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x6f,
	0x70, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x3a, 0x23, 0x8a, 0xa6, 0x1d,
	0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xad, 0x03, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92,
	0xa6, 0x1d, 0x41, 0xa2, 0x01, 0x3e, 0x54, 0x42, 0x44, 0x0a, 0x0a, 0x78, 0x2d, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x3a, 0x0a, 0x2d, 0x20, 0x23, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x48,
	0x6f, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x0a, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x86,
	0x01, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0xa6, 0x1d,
	0x53, 0xa2, 0x01, 0x50, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0xa6, 0x1d, 0x42, 0xa2,
	0x01, 0x3f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x66, 0x69, 0x65,
	0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x63, 0x61, 0x72, 0x64,
	0x20, 0x28, 0x6e, 0x69, 0x63, 0x29, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x65, 0x74, 0x68,
	0x31, 0x52, 0x07, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x43, 0x8a, 0xa6, 0x1d, 0x3f,
	0x52, 0x3d, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x20, 0x68, 0x6f, 0x73, 0x74,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x75, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x43, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32,
	0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30,
	0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0xad, 0x02, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32,
	0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30,
	0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0x69, 0x0a, 0x14, 0x52, 0x75, 0x6e,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x51, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30,
	0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30,
	0x22, 0x5d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xb7, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30,
	0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x32, 0xd7, 0x04, 0x0a, 0x07, 0x4f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x12, 0x77, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x21, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0xa2, 0xa6, 0x1d, 0x1f, 0x52,
	0x1d, 0x53, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4f, 0x4e, 0x45, 0x78, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xa0,
	0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4c, 0xa2, 0xa6, 0x1d, 0x48, 0x52, 0x46, 0x47, 0x65, 0x74, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x4f, 0x4e, 0x45, 0x78, 0x20, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0xa2, 0xa6, 0x1d, 0x2a, 0x52, 0x28, 0x52, 0x75, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x22, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0xa2, 0xa6, 0x1d, 0x1f, 0x52,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x23,
	0x9a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x3a, 0x5f, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xe1, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x70, 0x69, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4d, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x3a, 0x5d, 0x0a, 0x08, 0x66, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xe2, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70,
	0x69, 0x46, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x66, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x3a, 0x5f, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xe3, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x70, 0x69, 0x53, 0x76, 0x63, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x73, 0x76, 0x63, 0x4d, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x3a, 0x5e, 0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xe4, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x70, 0x69, 0x52, 0x70, 0x63, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x72, 0x70, 0x63, 0x4d, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6f, 0x6e, 0x65, 0x78,
	0x67, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e,
	0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_onexdataflowapi_proto_rawDescOnce sync.Once
	file_onexdataflowapi_proto_rawDescData = file_onexdataflowapi_proto_rawDesc
)

func file_onexdataflowapi_proto_rawDescGZIP() []byte {
	file_onexdataflowapi_proto_rawDescOnce.Do(func() {
		file_onexdataflowapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_onexdataflowapi_proto_rawDescData)
	})
	return file_onexdataflowapi_proto_rawDescData
}

var file_onexdataflowapi_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_onexdataflowapi_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_onexdataflowapi_proto_goTypes = []interface{}{
	(DataflowFlowProfile_L2ProtocolChoice_Enum)(0),       // 0: onexdataflowapi.DataflowFlowProfile.L2ProtocolChoice.Enum
	(DataflowFlowProfile_L4ProtocolChoice_Enum)(0),       // 1: onexdataflowapi.DataflowFlowProfile.L4ProtocolChoice.Enum
	(DataflowFlowProfileTcp_CongestionAlgorithm_Enum)(0), // 2: onexdataflowapi.DataflowFlowProfileTcp.CongestionAlgorithm.Enum
	(L4PortRange_Choice_Enum)(0),                         // 3: onexdataflowapi.L4PortRange.Choice.Enum
	(DataflowWorkloadItem_Choice_Enum)(0),                // 4: onexdataflowapi.DataflowWorkloadItem.Choice.Enum
	(DataflowAllReduceWorkload_Type_Enum)(0),             // 5: onexdataflowapi.DataflowAllReduceWorkload.Type.Enum
	(DataflowComputeWorkload_Choice_Enum)(0),             // 6: onexdataflowapi.DataflowComputeWorkload.Choice.Enum
	(*OpenApiMsgOpt)(nil),                                // 7: onexdataflowapi.OpenApiMsgOpt
	(*OpenApiFldOpt)(nil),                                // 8: onexdataflowapi.OpenApiFldOpt
	(*OpenApiSvcOpt)(nil),                                // 9: onexdataflowapi.OpenApiSvcOpt
	(*OpenApiRpcOpt)(nil),                                // 10: onexdataflowapi.OpenApiRpcOpt
	(*GlobalNamedObject)(nil),                            // 11: onexdataflowapi.GlobalNamedObject
	(*ErrorDetails)(nil),                                 // 12: onexdataflowapi.ErrorDetails
	(*WarningDetails)(nil),                               // 13: onexdataflowapi.WarningDetails
	(*Config)(nil),                                       // 14: onexdataflowapi.Config
	(*GetConfigDetails)(nil),                             // 15: onexdataflowapi.GetConfigDetails
	(*ExperimentRequest)(nil),                            // 16: onexdataflowapi.ExperimentRequest
	(*MetricsRequest)(nil),                               // 17: onexdataflowapi.MetricsRequest
	(*MetricsResponse)(nil),                              // 18: onexdataflowapi.MetricsResponse
	(*MetricsResponseFlowResult)(nil),                    // 19: onexdataflowapi.MetricsResponseFlowResult
	(*MetricsResponseFlowResultTcpInfo)(nil),             // 20: onexdataflowapi.MetricsResponseFlowResultTcpInfo
	(*Host)(nil),                                         // 21: onexdataflowapi.Host
	(*Dataflow)(nil),                                     // 22: onexdataflowapi.Dataflow
	(*DataflowFlowProfile)(nil),                          // 23: onexdataflowapi.DataflowFlowProfile
	(*DataflowFlowProfileEthernet)(nil),                  // 24: onexdataflowapi.DataflowFlowProfileEthernet
	(*DataflowFlowProfileTcp)(nil),                       // 25: onexdataflowapi.DataflowFlowProfileTcp
	(*L4PortRange)(nil),                                  // 26: onexdataflowapi.L4PortRange
	(*L4PortRangeSingleValue)(nil),                       // 27: onexdataflowapi.L4PortRangeSingleValue
	(*L4PortRangeRange)(nil),                             // 28: onexdataflowapi.L4PortRangeRange
	(*DataflowFlowProfileUdp)(nil),                       // 29: onexdataflowapi.DataflowFlowProfileUdp
	(*DataflowWorkloadItem)(nil),                         // 30: onexdataflowapi.DataflowWorkloadItem
	(*DataflowScatterWorkload)(nil),                      // 31: onexdataflowapi.DataflowScatterWorkload
	(*DataflowBroadcastWorkload)(nil),                    // 32: onexdataflowapi.DataflowBroadcastWorkload
	(*DataflowGatherWorkload)(nil),                       // 33: onexdataflowapi.DataflowGatherWorkload
	(*DataflowAllReduceWorkload)(nil),                    // 34: onexdataflowapi.DataflowAllReduceWorkload
	(*DataflowComputeWorkload)(nil),                      // 35: onexdataflowapi.DataflowComputeWorkload
	(*DataflowSimulatedComputeWorkload)(nil),             // 36: onexdataflowapi.DataflowSimulatedComputeWorkload
	(*DataflowLoopWorkload)(nil),                         // 37: onexdataflowapi.DataflowLoopWorkload
	(*DataflowHostManagement)(nil),                       // 38: onexdataflowapi.DataflowHostManagement
	(*SetConfigRequest)(nil),                             // 39: onexdataflowapi.SetConfigRequest
	(*GetConfigRequest)(nil),                             // 40: onexdataflowapi.GetConfigRequest
	(*SetConfigResponse)(nil),                            // 41: onexdataflowapi.SetConfigResponse
	(*GetConfigResponse)(nil),                            // 42: onexdataflowapi.GetConfigResponse
	(*RunExperimentRequest)(nil),                         // 43: onexdataflowapi.RunExperimentRequest
	(*RunExperimentResponse)(nil),                        // 44: onexdataflowapi.RunExperimentResponse
	(*GetMetricsRequest)(nil),                            // 45: onexdataflowapi.GetMetricsRequest
	(*GetMetricsResponse)(nil),                           // 46: onexdataflowapi.GetMetricsResponse
	(*DataflowFlowProfile_L2ProtocolChoice)(nil),         // 47: onexdataflowapi.DataflowFlowProfile.L2ProtocolChoice
	(*DataflowFlowProfile_L4ProtocolChoice)(nil),         // 48: onexdataflowapi.DataflowFlowProfile.L4ProtocolChoice
	(*DataflowFlowProfileTcp_CongestionAlgorithm)(nil),   // 49: onexdataflowapi.DataflowFlowProfileTcp.CongestionAlgorithm
	(*L4PortRange_Choice)(nil),                           // 50: onexdataflowapi.L4PortRange.Choice
	(*DataflowWorkloadItem_Choice)(nil),                  // 51: onexdataflowapi.DataflowWorkloadItem.Choice
	(*DataflowAllReduceWorkload_Type)(nil),               // 52: onexdataflowapi.DataflowAllReduceWorkload.Type
	(*DataflowComputeWorkload_Choice)(nil),               // 53: onexdataflowapi.DataflowComputeWorkload.Choice
	(*descriptorpb.MessageOptions)(nil),                  // 54: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),                    // 55: google.protobuf.FieldOptions
	(*descriptorpb.ServiceOptions)(nil),                  // 56: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),                   // 57: google.protobuf.MethodOptions
}
var file_onexdataflowapi_proto_depIdxs = []int32{
	21, // 0: onexdataflowapi.Config.hosts:type_name -> onexdataflowapi.Host
	22, // 1: onexdataflowapi.Config.dataflow:type_name -> onexdataflowapi.Dataflow
	19, // 2: onexdataflowapi.MetricsResponse.flow_results:type_name -> onexdataflowapi.MetricsResponseFlowResult
	20, // 3: onexdataflowapi.MetricsResponseFlowResult.tcp_info:type_name -> onexdataflowapi.MetricsResponseFlowResultTcpInfo
	38, // 4: onexdataflowapi.Dataflow.host_management:type_name -> onexdataflowapi.DataflowHostManagement
	30, // 5: onexdataflowapi.Dataflow.workload:type_name -> onexdataflowapi.DataflowWorkloadItem
	23, // 6: onexdataflowapi.Dataflow.flow_profiles:type_name -> onexdataflowapi.DataflowFlowProfile
	0,  // 7: onexdataflowapi.DataflowFlowProfile.l2_protocol_choice:type_name -> onexdataflowapi.DataflowFlowProfile.L2ProtocolChoice.Enum
	24, // 8: onexdataflowapi.DataflowFlowProfile.ethernet:type_name -> onexdataflowapi.DataflowFlowProfileEthernet
	1,  // 9: onexdataflowapi.DataflowFlowProfile.l4_protocol_choice:type_name -> onexdataflowapi.DataflowFlowProfile.L4ProtocolChoice.Enum
	25, // 10: onexdataflowapi.DataflowFlowProfile.tcp:type_name -> onexdataflowapi.DataflowFlowProfileTcp
	29, // 11: onexdataflowapi.DataflowFlowProfile.udp:type_name -> onexdataflowapi.DataflowFlowProfileUdp
	2,  // 12: onexdataflowapi.DataflowFlowProfileTcp.congestionalgorithm:type_name -> onexdataflowapi.DataflowFlowProfileTcp.CongestionAlgorithm.Enum
	26, // 13: onexdataflowapi.DataflowFlowProfileTcp.destinationport:type_name -> onexdataflowapi.L4PortRange
	26, // 14: onexdataflowapi.DataflowFlowProfileTcp.sourceport:type_name -> onexdataflowapi.L4PortRange
	3,  // 15: onexdataflowapi.L4PortRange.choice:type_name -> onexdataflowapi.L4PortRange.Choice.Enum
	27, // 16: onexdataflowapi.L4PortRange.single_value:type_name -> onexdataflowapi.L4PortRangeSingleValue
	28, // 17: onexdataflowapi.L4PortRange.range:type_name -> onexdataflowapi.L4PortRangeRange
	4,  // 18: onexdataflowapi.DataflowWorkloadItem.choice:type_name -> onexdataflowapi.DataflowWorkloadItem.Choice.Enum
	31, // 19: onexdataflowapi.DataflowWorkloadItem.scatter:type_name -> onexdataflowapi.DataflowScatterWorkload
	33, // 20: onexdataflowapi.DataflowWorkloadItem.gather:type_name -> onexdataflowapi.DataflowGatherWorkload
	37, // 21: onexdataflowapi.DataflowWorkloadItem.loop:type_name -> onexdataflowapi.DataflowLoopWorkload
	35, // 22: onexdataflowapi.DataflowWorkloadItem.compute:type_name -> onexdataflowapi.DataflowComputeWorkload
	34, // 23: onexdataflowapi.DataflowWorkloadItem.all_reduce:type_name -> onexdataflowapi.DataflowAllReduceWorkload
	32, // 24: onexdataflowapi.DataflowWorkloadItem.broadcast:type_name -> onexdataflowapi.DataflowBroadcastWorkload
	5,  // 25: onexdataflowapi.DataflowAllReduceWorkload.type:type_name -> onexdataflowapi.DataflowAllReduceWorkload.Type.Enum
	6,  // 26: onexdataflowapi.DataflowComputeWorkload.choice:type_name -> onexdataflowapi.DataflowComputeWorkload.Choice.Enum
	36, // 27: onexdataflowapi.DataflowComputeWorkload.simulated:type_name -> onexdataflowapi.DataflowSimulatedComputeWorkload
	30, // 28: onexdataflowapi.DataflowLoopWorkload.children:type_name -> onexdataflowapi.DataflowWorkloadItem
	14, // 29: onexdataflowapi.SetConfigRequest.config:type_name -> onexdataflowapi.Config
	15, // 30: onexdataflowapi.GetConfigRequest.get_config_details:type_name -> onexdataflowapi.GetConfigDetails
	14, // 31: onexdataflowapi.SetConfigResponse.status_code_200:type_name -> onexdataflowapi.Config
	12, // 32: onexdataflowapi.SetConfigResponse.status_code_400:type_name -> onexdataflowapi.ErrorDetails
	12, // 33: onexdataflowapi.SetConfigResponse.status_code_500:type_name -> onexdataflowapi.ErrorDetails
	14, // 34: onexdataflowapi.GetConfigResponse.status_code_200:type_name -> onexdataflowapi.Config
	12, // 35: onexdataflowapi.GetConfigResponse.status_code_400:type_name -> onexdataflowapi.ErrorDetails
	12, // 36: onexdataflowapi.GetConfigResponse.status_code_500:type_name -> onexdataflowapi.ErrorDetails
	16, // 37: onexdataflowapi.RunExperimentRequest.experiment_request:type_name -> onexdataflowapi.ExperimentRequest
	12, // 38: onexdataflowapi.RunExperimentResponse.status_code_400:type_name -> onexdataflowapi.ErrorDetails
	12, // 39: onexdataflowapi.RunExperimentResponse.status_code_500:type_name -> onexdataflowapi.ErrorDetails
	13, // 40: onexdataflowapi.RunExperimentResponse.status_code_200:type_name -> onexdataflowapi.WarningDetails
	17, // 41: onexdataflowapi.GetMetricsRequest.metrics_request:type_name -> onexdataflowapi.MetricsRequest
	18, // 42: onexdataflowapi.GetMetricsResponse.status_code_200:type_name -> onexdataflowapi.MetricsResponse
	12, // 43: onexdataflowapi.GetMetricsResponse.status_code_400:type_name -> onexdataflowapi.ErrorDetails
	12, // 44: onexdataflowapi.GetMetricsResponse.status_code_500:type_name -> onexdataflowapi.ErrorDetails
	54, // 45: onexdataflowapi.msg_meta:extendee -> google.protobuf.MessageOptions
	55, // 46: onexdataflowapi.fld_meta:extendee -> google.protobuf.FieldOptions
	56, // 47: onexdataflowapi.svc_meta:extendee -> google.protobuf.ServiceOptions
	57, // 48: onexdataflowapi.rpc_meta:extendee -> google.protobuf.MethodOptions
	7,  // 49: onexdataflowapi.msg_meta:type_name -> onexdataflowapi.OpenApiMsgOpt
	8,  // 50: onexdataflowapi.fld_meta:type_name -> onexdataflowapi.OpenApiFldOpt
	9,  // 51: onexdataflowapi.svc_meta:type_name -> onexdataflowapi.OpenApiSvcOpt
	10, // 52: onexdataflowapi.rpc_meta:type_name -> onexdataflowapi.OpenApiRpcOpt
	39, // 53: onexdataflowapi.Openapi.SetConfig:input_type -> onexdataflowapi.SetConfigRequest
	40, // 54: onexdataflowapi.Openapi.GetConfig:input_type -> onexdataflowapi.GetConfigRequest
	43, // 55: onexdataflowapi.Openapi.RunExperiment:input_type -> onexdataflowapi.RunExperimentRequest
	45, // 56: onexdataflowapi.Openapi.GetMetrics:input_type -> onexdataflowapi.GetMetricsRequest
	41, // 57: onexdataflowapi.Openapi.SetConfig:output_type -> onexdataflowapi.SetConfigResponse
	42, // 58: onexdataflowapi.Openapi.GetConfig:output_type -> onexdataflowapi.GetConfigResponse
	44, // 59: onexdataflowapi.Openapi.RunExperiment:output_type -> onexdataflowapi.RunExperimentResponse
	46, // 60: onexdataflowapi.Openapi.GetMetrics:output_type -> onexdataflowapi.GetMetricsResponse
	57, // [57:61] is the sub-list for method output_type
	53, // [53:57] is the sub-list for method input_type
	49, // [49:53] is the sub-list for extension type_name
	45, // [45:49] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_onexdataflowapi_proto_init() }
func file_onexdataflowapi_proto_init() {
	if File_onexdataflowapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_onexdataflowapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiMsgOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiFldOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiSvcOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiRpcOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalNamedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponseFlowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponseFlowResultTcpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfileEthernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfileTcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L4PortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L4PortRangeSingleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L4PortRangeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfileUdp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowWorkloadItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowScatterWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowBroadcastWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowGatherWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowAllReduceWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowComputeWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowSimulatedComputeWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowLoopWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowHostManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfile_L2ProtocolChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfile_L4ProtocolChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfileTcp_CongestionAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L4PortRange_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowWorkloadItem_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowAllReduceWorkload_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdataflowapi_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowComputeWorkload_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_onexdataflowapi_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_onexdataflowapi_proto_msgTypes[39].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_onexdataflowapi_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   47,
			NumExtensions: 4,
			NumServices:   1,
		},
		GoTypes:           file_onexdataflowapi_proto_goTypes,
		DependencyIndexes: file_onexdataflowapi_proto_depIdxs,
		EnumInfos:         file_onexdataflowapi_proto_enumTypes,
		MessageInfos:      file_onexdataflowapi_proto_msgTypes,
		ExtensionInfos:    file_onexdataflowapi_proto_extTypes,
	}.Build()
	File_onexdataflowapi_proto = out.File
	file_onexdataflowapi_proto_rawDesc = nil
	file_onexdataflowapi_proto_goTypes = nil
	file_onexdataflowapi_proto_depIdxs = nil
}
