// ONEx Data Models 0.0.1
// License: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.17.3
// source: onexdatamodel.proto

package onexdatamodel

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Fabric_Choice_Enum int32

const (
	Fabric_Choice_unspecified    Fabric_Choice_Enum = 0
	Fabric_Choice_spine_pod_rack Fabric_Choice_Enum = 1
)

// Enum value maps for Fabric_Choice_Enum.
var (
	Fabric_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "spine_pod_rack",
	}
	Fabric_Choice_Enum_value = map[string]int32{
		"unspecified":    0,
		"spine_pod_rack": 1,
	}
)

func (x Fabric_Choice_Enum) Enum() *Fabric_Choice_Enum {
	p := new(Fabric_Choice_Enum)
	*p = x
	return p
}

func (x Fabric_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fabric_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[0].Descriptor()
}

func (Fabric_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[0]
}

func (x Fabric_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fabric_Choice_Enum.Descriptor instead.
func (Fabric_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{16, 0, 0}
}

type FabricSpine_DownlinkEcmpMode_Enum int32

const (
	FabricSpine_DownlinkEcmpMode_unspecified  FabricSpine_DownlinkEcmpMode_Enum = 0
	FabricSpine_DownlinkEcmpMode_random_spray FabricSpine_DownlinkEcmpMode_Enum = 1
	FabricSpine_DownlinkEcmpMode_hash_3_tuple FabricSpine_DownlinkEcmpMode_Enum = 2
	FabricSpine_DownlinkEcmpMode_hash_5_tuple FabricSpine_DownlinkEcmpMode_Enum = 3
)

// Enum value maps for FabricSpine_DownlinkEcmpMode_Enum.
var (
	FabricSpine_DownlinkEcmpMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "random_spray",
		2: "hash_3_tuple",
		3: "hash_5_tuple",
	}
	FabricSpine_DownlinkEcmpMode_Enum_value = map[string]int32{
		"unspecified":  0,
		"random_spray": 1,
		"hash_3_tuple": 2,
		"hash_5_tuple": 3,
	}
)

func (x FabricSpine_DownlinkEcmpMode_Enum) Enum() *FabricSpine_DownlinkEcmpMode_Enum {
	p := new(FabricSpine_DownlinkEcmpMode_Enum)
	*p = x
	return p
}

func (x FabricSpine_DownlinkEcmpMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FabricSpine_DownlinkEcmpMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[1].Descriptor()
}

func (FabricSpine_DownlinkEcmpMode_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[1]
}

func (x FabricSpine_DownlinkEcmpMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FabricSpine_DownlinkEcmpMode_Enum.Descriptor instead.
func (FabricSpine_DownlinkEcmpMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{18, 0, 0}
}

type FabricPodSwitch_UplinkEcmpMode_Enum int32

const (
	FabricPodSwitch_UplinkEcmpMode_unspecified  FabricPodSwitch_UplinkEcmpMode_Enum = 0
	FabricPodSwitch_UplinkEcmpMode_random_spray FabricPodSwitch_UplinkEcmpMode_Enum = 1
	FabricPodSwitch_UplinkEcmpMode_hash_3_tuple FabricPodSwitch_UplinkEcmpMode_Enum = 2
	FabricPodSwitch_UplinkEcmpMode_hash_5_tuple FabricPodSwitch_UplinkEcmpMode_Enum = 3
)

// Enum value maps for FabricPodSwitch_UplinkEcmpMode_Enum.
var (
	FabricPodSwitch_UplinkEcmpMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "random_spray",
		2: "hash_3_tuple",
		3: "hash_5_tuple",
	}
	FabricPodSwitch_UplinkEcmpMode_Enum_value = map[string]int32{
		"unspecified":  0,
		"random_spray": 1,
		"hash_3_tuple": 2,
		"hash_5_tuple": 3,
	}
)

func (x FabricPodSwitch_UplinkEcmpMode_Enum) Enum() *FabricPodSwitch_UplinkEcmpMode_Enum {
	p := new(FabricPodSwitch_UplinkEcmpMode_Enum)
	*p = x
	return p
}

func (x FabricPodSwitch_UplinkEcmpMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FabricPodSwitch_UplinkEcmpMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[2].Descriptor()
}

func (FabricPodSwitch_UplinkEcmpMode_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[2]
}

func (x FabricPodSwitch_UplinkEcmpMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FabricPodSwitch_UplinkEcmpMode_Enum.Descriptor instead.
func (FabricPodSwitch_UplinkEcmpMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{21, 0, 0}
}

type FabricPodSwitch_DownlinkEcmpMode_Enum int32

const (
	FabricPodSwitch_DownlinkEcmpMode_unspecified  FabricPodSwitch_DownlinkEcmpMode_Enum = 0
	FabricPodSwitch_DownlinkEcmpMode_random_spray FabricPodSwitch_DownlinkEcmpMode_Enum = 1
	FabricPodSwitch_DownlinkEcmpMode_hash_3_tuple FabricPodSwitch_DownlinkEcmpMode_Enum = 2
	FabricPodSwitch_DownlinkEcmpMode_hash_5_tuple FabricPodSwitch_DownlinkEcmpMode_Enum = 3
)

// Enum value maps for FabricPodSwitch_DownlinkEcmpMode_Enum.
var (
	FabricPodSwitch_DownlinkEcmpMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "random_spray",
		2: "hash_3_tuple",
		3: "hash_5_tuple",
	}
	FabricPodSwitch_DownlinkEcmpMode_Enum_value = map[string]int32{
		"unspecified":  0,
		"random_spray": 1,
		"hash_3_tuple": 2,
		"hash_5_tuple": 3,
	}
)

func (x FabricPodSwitch_DownlinkEcmpMode_Enum) Enum() *FabricPodSwitch_DownlinkEcmpMode_Enum {
	p := new(FabricPodSwitch_DownlinkEcmpMode_Enum)
	*p = x
	return p
}

func (x FabricPodSwitch_DownlinkEcmpMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FabricPodSwitch_DownlinkEcmpMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[3].Descriptor()
}

func (FabricPodSwitch_DownlinkEcmpMode_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[3]
}

func (x FabricPodSwitch_DownlinkEcmpMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FabricPodSwitch_DownlinkEcmpMode_Enum.Descriptor instead.
func (FabricPodSwitch_DownlinkEcmpMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{21, 1, 0}
}

type FabricRackProfile_TorUplinkEcmpMode_Enum int32

const (
	FabricRackProfile_TorUplinkEcmpMode_unspecified  FabricRackProfile_TorUplinkEcmpMode_Enum = 0
	FabricRackProfile_TorUplinkEcmpMode_random_spray FabricRackProfile_TorUplinkEcmpMode_Enum = 1
	FabricRackProfile_TorUplinkEcmpMode_hash_3_tuple FabricRackProfile_TorUplinkEcmpMode_Enum = 2
	FabricRackProfile_TorUplinkEcmpMode_hash_5_tuple FabricRackProfile_TorUplinkEcmpMode_Enum = 3
)

// Enum value maps for FabricRackProfile_TorUplinkEcmpMode_Enum.
var (
	FabricRackProfile_TorUplinkEcmpMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "random_spray",
		2: "hash_3_tuple",
		3: "hash_5_tuple",
	}
	FabricRackProfile_TorUplinkEcmpMode_Enum_value = map[string]int32{
		"unspecified":  0,
		"random_spray": 1,
		"hash_3_tuple": 2,
		"hash_5_tuple": 3,
	}
)

func (x FabricRackProfile_TorUplinkEcmpMode_Enum) Enum() *FabricRackProfile_TorUplinkEcmpMode_Enum {
	p := new(FabricRackProfile_TorUplinkEcmpMode_Enum)
	*p = x
	return p
}

func (x FabricRackProfile_TorUplinkEcmpMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FabricRackProfile_TorUplinkEcmpMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[4].Descriptor()
}

func (FabricRackProfile_TorUplinkEcmpMode_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[4]
}

func (x FabricRackProfile_TorUplinkEcmpMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FabricRackProfile_TorUplinkEcmpMode_Enum.Descriptor instead.
func (FabricRackProfile_TorUplinkEcmpMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{23, 0, 0}
}

type FabricRackProfile_TorDownlinkEcmpMode_Enum int32

const (
	FabricRackProfile_TorDownlinkEcmpMode_unspecified  FabricRackProfile_TorDownlinkEcmpMode_Enum = 0
	FabricRackProfile_TorDownlinkEcmpMode_random_spray FabricRackProfile_TorDownlinkEcmpMode_Enum = 1
	FabricRackProfile_TorDownlinkEcmpMode_hash_3_tuple FabricRackProfile_TorDownlinkEcmpMode_Enum = 2
	FabricRackProfile_TorDownlinkEcmpMode_hash_5_tuple FabricRackProfile_TorDownlinkEcmpMode_Enum = 3
)

// Enum value maps for FabricRackProfile_TorDownlinkEcmpMode_Enum.
var (
	FabricRackProfile_TorDownlinkEcmpMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "random_spray",
		2: "hash_3_tuple",
		3: "hash_5_tuple",
	}
	FabricRackProfile_TorDownlinkEcmpMode_Enum_value = map[string]int32{
		"unspecified":  0,
		"random_spray": 1,
		"hash_3_tuple": 2,
		"hash_5_tuple": 3,
	}
)

func (x FabricRackProfile_TorDownlinkEcmpMode_Enum) Enum() *FabricRackProfile_TorDownlinkEcmpMode_Enum {
	p := new(FabricRackProfile_TorDownlinkEcmpMode_Enum)
	*p = x
	return p
}

func (x FabricRackProfile_TorDownlinkEcmpMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FabricRackProfile_TorDownlinkEcmpMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[5].Descriptor()
}

func (FabricRackProfile_TorDownlinkEcmpMode_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[5]
}

func (x FabricRackProfile_TorDownlinkEcmpMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FabricRackProfile_TorDownlinkEcmpMode_Enum.Descriptor instead.
func (FabricRackProfile_TorDownlinkEcmpMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{23, 1, 0}
}

type FabricQosProfileScheduler_SchedulerMode_Enum int32

const (
	FabricQosProfileScheduler_SchedulerMode_unspecified          FabricQosProfileScheduler_SchedulerMode_Enum = 0
	FabricQosProfileScheduler_SchedulerMode_strict_priority      FabricQosProfileScheduler_SchedulerMode_Enum = 1
	FabricQosProfileScheduler_SchedulerMode_weighted_round_robin FabricQosProfileScheduler_SchedulerMode_Enum = 2
)

// Enum value maps for FabricQosProfileScheduler_SchedulerMode_Enum.
var (
	FabricQosProfileScheduler_SchedulerMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "strict_priority",
		2: "weighted_round_robin",
	}
	FabricQosProfileScheduler_SchedulerMode_Enum_value = map[string]int32{
		"unspecified":          0,
		"strict_priority":      1,
		"weighted_round_robin": 2,
	}
)

func (x FabricQosProfileScheduler_SchedulerMode_Enum) Enum() *FabricQosProfileScheduler_SchedulerMode_Enum {
	p := new(FabricQosProfileScheduler_SchedulerMode_Enum)
	*p = x
	return p
}

func (x FabricQosProfileScheduler_SchedulerMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FabricQosProfileScheduler_SchedulerMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[6].Descriptor()
}

func (FabricQosProfileScheduler_SchedulerMode_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[6]
}

func (x FabricQosProfileScheduler_SchedulerMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FabricQosProfileScheduler_SchedulerMode_Enum.Descriptor instead.
func (FabricQosProfileScheduler_SchedulerMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{26, 0, 0}
}

type SwitchHostLink_Choice_Enum int32

const (
	SwitchHostLink_Choice_unspecified SwitchHostLink_Choice_Enum = 0
	SwitchHostLink_Choice_spine       SwitchHostLink_Choice_Enum = 1
	SwitchHostLink_Choice_pod         SwitchHostLink_Choice_Enum = 2
	SwitchHostLink_Choice_rack        SwitchHostLink_Choice_Enum = 3
)

// Enum value maps for SwitchHostLink_Choice_Enum.
var (
	SwitchHostLink_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "spine",
		2: "pod",
		3: "rack",
	}
	SwitchHostLink_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"spine":       1,
		"pod":         2,
		"rack":        3,
	}
)

func (x SwitchHostLink_Choice_Enum) Enum() *SwitchHostLink_Choice_Enum {
	p := new(SwitchHostLink_Choice_Enum)
	*p = x
	return p
}

func (x SwitchHostLink_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchHostLink_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[7].Descriptor()
}

func (SwitchHostLink_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[7]
}

func (x SwitchHostLink_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchHostLink_Choice_Enum.Descriptor instead.
func (SwitchHostLink_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{29, 0, 0}
}

type DataflowFlowProfile_L2ProtocolChoice_Enum int32

const (
	DataflowFlowProfile_L2ProtocolChoice_unspecified DataflowFlowProfile_L2ProtocolChoice_Enum = 0
	DataflowFlowProfile_L2ProtocolChoice_ethernet    DataflowFlowProfile_L2ProtocolChoice_Enum = 1
)

// Enum value maps for DataflowFlowProfile_L2ProtocolChoice_Enum.
var (
	DataflowFlowProfile_L2ProtocolChoice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ethernet",
	}
	DataflowFlowProfile_L2ProtocolChoice_Enum_value = map[string]int32{
		"unspecified": 0,
		"ethernet":    1,
	}
)

func (x DataflowFlowProfile_L2ProtocolChoice_Enum) Enum() *DataflowFlowProfile_L2ProtocolChoice_Enum {
	p := new(DataflowFlowProfile_L2ProtocolChoice_Enum)
	*p = x
	return p
}

func (x DataflowFlowProfile_L2ProtocolChoice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowFlowProfile_L2ProtocolChoice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[8].Descriptor()
}

func (DataflowFlowProfile_L2ProtocolChoice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[8]
}

func (x DataflowFlowProfile_L2ProtocolChoice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowFlowProfile_L2ProtocolChoice_Enum.Descriptor instead.
func (DataflowFlowProfile_L2ProtocolChoice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{32, 0, 0}
}

type DataflowFlowProfile_L4ProtocolChoice_Enum int32

const (
	DataflowFlowProfile_L4ProtocolChoice_unspecified DataflowFlowProfile_L4ProtocolChoice_Enum = 0
	DataflowFlowProfile_L4ProtocolChoice_tcp         DataflowFlowProfile_L4ProtocolChoice_Enum = 1
	DataflowFlowProfile_L4ProtocolChoice_udp         DataflowFlowProfile_L4ProtocolChoice_Enum = 2
)

// Enum value maps for DataflowFlowProfile_L4ProtocolChoice_Enum.
var (
	DataflowFlowProfile_L4ProtocolChoice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "tcp",
		2: "udp",
	}
	DataflowFlowProfile_L4ProtocolChoice_Enum_value = map[string]int32{
		"unspecified": 0,
		"tcp":         1,
		"udp":         2,
	}
)

func (x DataflowFlowProfile_L4ProtocolChoice_Enum) Enum() *DataflowFlowProfile_L4ProtocolChoice_Enum {
	p := new(DataflowFlowProfile_L4ProtocolChoice_Enum)
	*p = x
	return p
}

func (x DataflowFlowProfile_L4ProtocolChoice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowFlowProfile_L4ProtocolChoice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[9].Descriptor()
}

func (DataflowFlowProfile_L4ProtocolChoice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[9]
}

func (x DataflowFlowProfile_L4ProtocolChoice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowFlowProfile_L4ProtocolChoice_Enum.Descriptor instead.
func (DataflowFlowProfile_L4ProtocolChoice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{32, 1, 0}
}

type DataflowFlowProfileTcp_CongestionAlgorithm_Enum int32

const (
	DataflowFlowProfileTcp_CongestionAlgorithm_unspecified DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 0
	DataflowFlowProfileTcp_CongestionAlgorithm_bbr         DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 1
	DataflowFlowProfileTcp_CongestionAlgorithm_dctcp       DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 2
	DataflowFlowProfileTcp_CongestionAlgorithm_cubic       DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 3
	DataflowFlowProfileTcp_CongestionAlgorithm_reno        DataflowFlowProfileTcp_CongestionAlgorithm_Enum = 4
)

// Enum value maps for DataflowFlowProfileTcp_CongestionAlgorithm_Enum.
var (
	DataflowFlowProfileTcp_CongestionAlgorithm_Enum_name = map[int32]string{
		0: "unspecified",
		1: "bbr",
		2: "dctcp",
		3: "cubic",
		4: "reno",
	}
	DataflowFlowProfileTcp_CongestionAlgorithm_Enum_value = map[string]int32{
		"unspecified": 0,
		"bbr":         1,
		"dctcp":       2,
		"cubic":       3,
		"reno":        4,
	}
)

func (x DataflowFlowProfileTcp_CongestionAlgorithm_Enum) Enum() *DataflowFlowProfileTcp_CongestionAlgorithm_Enum {
	p := new(DataflowFlowProfileTcp_CongestionAlgorithm_Enum)
	*p = x
	return p
}

func (x DataflowFlowProfileTcp_CongestionAlgorithm_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowFlowProfileTcp_CongestionAlgorithm_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[10].Descriptor()
}

func (DataflowFlowProfileTcp_CongestionAlgorithm_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[10]
}

func (x DataflowFlowProfileTcp_CongestionAlgorithm_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowFlowProfileTcp_CongestionAlgorithm_Enum.Descriptor instead.
func (DataflowFlowProfileTcp_CongestionAlgorithm_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{34, 0, 0}
}

type L4PortRange_Choice_Enum int32

const (
	L4PortRange_Choice_unspecified  L4PortRange_Choice_Enum = 0
	L4PortRange_Choice_single_value L4PortRange_Choice_Enum = 1
	L4PortRange_Choice_range        L4PortRange_Choice_Enum = 2
)

// Enum value maps for L4PortRange_Choice_Enum.
var (
	L4PortRange_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "single_value",
		2: "range",
	}
	L4PortRange_Choice_Enum_value = map[string]int32{
		"unspecified":  0,
		"single_value": 1,
		"range":        2,
	}
)

func (x L4PortRange_Choice_Enum) Enum() *L4PortRange_Choice_Enum {
	p := new(L4PortRange_Choice_Enum)
	*p = x
	return p
}

func (x L4PortRange_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (L4PortRange_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[11].Descriptor()
}

func (L4PortRange_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[11]
}

func (x L4PortRange_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use L4PortRange_Choice_Enum.Descriptor instead.
func (L4PortRange_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{35, 0, 0}
}

type DataflowWorkloadItem_Choice_Enum int32

const (
	DataflowWorkloadItem_Choice_unspecified DataflowWorkloadItem_Choice_Enum = 0
	DataflowWorkloadItem_Choice_scatter     DataflowWorkloadItem_Choice_Enum = 1
	DataflowWorkloadItem_Choice_gather      DataflowWorkloadItem_Choice_Enum = 2
	DataflowWorkloadItem_Choice_all_reduce  DataflowWorkloadItem_Choice_Enum = 3
	DataflowWorkloadItem_Choice_loop        DataflowWorkloadItem_Choice_Enum = 4
	DataflowWorkloadItem_Choice_compute     DataflowWorkloadItem_Choice_Enum = 5
	DataflowWorkloadItem_Choice_broadcast   DataflowWorkloadItem_Choice_Enum = 6
)

// Enum value maps for DataflowWorkloadItem_Choice_Enum.
var (
	DataflowWorkloadItem_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "scatter",
		2: "gather",
		3: "all_reduce",
		4: "loop",
		5: "compute",
		6: "broadcast",
	}
	DataflowWorkloadItem_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"scatter":     1,
		"gather":      2,
		"all_reduce":  3,
		"loop":        4,
		"compute":     5,
		"broadcast":   6,
	}
)

func (x DataflowWorkloadItem_Choice_Enum) Enum() *DataflowWorkloadItem_Choice_Enum {
	p := new(DataflowWorkloadItem_Choice_Enum)
	*p = x
	return p
}

func (x DataflowWorkloadItem_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowWorkloadItem_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[12].Descriptor()
}

func (DataflowWorkloadItem_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[12]
}

func (x DataflowWorkloadItem_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowWorkloadItem_Choice_Enum.Descriptor instead.
func (DataflowWorkloadItem_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{39, 0, 0}
}

type DataflowAllReduceWorkload_Type_Enum int32

const (
	DataflowAllReduceWorkload_Type_unspecified DataflowAllReduceWorkload_Type_Enum = 0
	DataflowAllReduceWorkload_Type_all_to_all  DataflowAllReduceWorkload_Type_Enum = 1
	DataflowAllReduceWorkload_Type_ring        DataflowAllReduceWorkload_Type_Enum = 2
	DataflowAllReduceWorkload_Type_butterfly   DataflowAllReduceWorkload_Type_Enum = 3
	DataflowAllReduceWorkload_Type_pipeline    DataflowAllReduceWorkload_Type_Enum = 4
)

// Enum value maps for DataflowAllReduceWorkload_Type_Enum.
var (
	DataflowAllReduceWorkload_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "all_to_all",
		2: "ring",
		3: "butterfly",
		4: "pipeline",
	}
	DataflowAllReduceWorkload_Type_Enum_value = map[string]int32{
		"unspecified": 0,
		"all_to_all":  1,
		"ring":        2,
		"butterfly":   3,
		"pipeline":    4,
	}
)

func (x DataflowAllReduceWorkload_Type_Enum) Enum() *DataflowAllReduceWorkload_Type_Enum {
	p := new(DataflowAllReduceWorkload_Type_Enum)
	*p = x
	return p
}

func (x DataflowAllReduceWorkload_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowAllReduceWorkload_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[13].Descriptor()
}

func (DataflowAllReduceWorkload_Type_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[13]
}

func (x DataflowAllReduceWorkload_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowAllReduceWorkload_Type_Enum.Descriptor instead.
func (DataflowAllReduceWorkload_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{43, 0, 0}
}

type DataflowComputeWorkload_Choice_Enum int32

const (
	DataflowComputeWorkload_Choice_unspecified DataflowComputeWorkload_Choice_Enum = 0
	DataflowComputeWorkload_Choice_simulated   DataflowComputeWorkload_Choice_Enum = 1
)

// Enum value maps for DataflowComputeWorkload_Choice_Enum.
var (
	DataflowComputeWorkload_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "simulated",
	}
	DataflowComputeWorkload_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"simulated":   1,
	}
)

func (x DataflowComputeWorkload_Choice_Enum) Enum() *DataflowComputeWorkload_Choice_Enum {
	p := new(DataflowComputeWorkload_Choice_Enum)
	*p = x
	return p
}

func (x DataflowComputeWorkload_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataflowComputeWorkload_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[14].Descriptor()
}

func (DataflowComputeWorkload_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[14]
}

func (x DataflowComputeWorkload_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataflowComputeWorkload_Choice_Enum.Descriptor instead.
func (DataflowComputeWorkload_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{44, 0, 0}
}

type ChaosBackgroundTrafficFlow_Choice_Enum int32

const (
	ChaosBackgroundTrafficFlow_Choice_unspecified ChaosBackgroundTrafficFlow_Choice_Enum = 0
	ChaosBackgroundTrafficFlow_Choice_stateless   ChaosBackgroundTrafficFlow_Choice_Enum = 1
)

// Enum value maps for ChaosBackgroundTrafficFlow_Choice_Enum.
var (
	ChaosBackgroundTrafficFlow_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "stateless",
	}
	ChaosBackgroundTrafficFlow_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"stateless":   1,
	}
)

func (x ChaosBackgroundTrafficFlow_Choice_Enum) Enum() *ChaosBackgroundTrafficFlow_Choice_Enum {
	p := new(ChaosBackgroundTrafficFlow_Choice_Enum)
	*p = x
	return p
}

func (x ChaosBackgroundTrafficFlow_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChaosBackgroundTrafficFlow_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[15].Descriptor()
}

func (ChaosBackgroundTrafficFlow_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[15]
}

func (x ChaosBackgroundTrafficFlow_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlow_Choice_Enum.Descriptor instead.
func (ChaosBackgroundTrafficFlow_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{50, 0, 0}
}

type ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum int32

const (
	ChaosBackgroundTrafficFlowEntryPoint_Choice_unspecified      ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum = 0
	ChaosBackgroundTrafficFlowEntryPoint_Choice_switch_reference ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum = 1
	ChaosBackgroundTrafficFlowEntryPoint_Choice_front_panel_port ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum = 2
)

// Enum value maps for ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum.
var (
	ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "switch_reference",
		2: "front_panel_port",
	}
	ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum_value = map[string]int32{
		"unspecified":      0,
		"switch_reference": 1,
		"front_panel_port": 2,
	}
)

func (x ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum) Enum() *ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum {
	p := new(ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum)
	*p = x
	return p
}

func (x ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[16].Descriptor()
}

func (ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[16]
}

func (x ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum.Descriptor instead.
func (ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{51, 0, 0}
}

type ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum int32

const (
	ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_unspecified ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum = 0
	ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_spine       ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum = 1
	ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_pod         ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum = 2
	ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_tor         ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum = 3
)

// Enum value maps for ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum.
var (
	ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "spine",
		2: "pod",
		3: "tor",
	}
	ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"spine":       1,
		"pod":         2,
		"tor":         3,
	}
)

func (x ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum) Enum() *ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum {
	p := new(ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum)
	*p = x
	return p
}

func (x ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[17].Descriptor()
}

func (ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[17]
}

func (x ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum.Descriptor instead.
func (ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{52, 0, 0}
}

type ChaosBackgroundTrafficFlowStateless_RateUnit_Enum int32

const (
	ChaosBackgroundTrafficFlowStateless_RateUnit_unspecified ChaosBackgroundTrafficFlowStateless_RateUnit_Enum = 0
	ChaosBackgroundTrafficFlowStateless_RateUnit_bps         ChaosBackgroundTrafficFlowStateless_RateUnit_Enum = 1
	ChaosBackgroundTrafficFlowStateless_RateUnit_kbps        ChaosBackgroundTrafficFlowStateless_RateUnit_Enum = 2
	ChaosBackgroundTrafficFlowStateless_RateUnit_mbps        ChaosBackgroundTrafficFlowStateless_RateUnit_Enum = 3
	ChaosBackgroundTrafficFlowStateless_RateUnit_gbps        ChaosBackgroundTrafficFlowStateless_RateUnit_Enum = 4
)

// Enum value maps for ChaosBackgroundTrafficFlowStateless_RateUnit_Enum.
var (
	ChaosBackgroundTrafficFlowStateless_RateUnit_Enum_name = map[int32]string{
		0: "unspecified",
		1: "bps",
		2: "kbps",
		3: "mbps",
		4: "gbps",
	}
	ChaosBackgroundTrafficFlowStateless_RateUnit_Enum_value = map[string]int32{
		"unspecified": 0,
		"bps":         1,
		"kbps":        2,
		"mbps":        3,
		"gbps":        4,
	}
)

func (x ChaosBackgroundTrafficFlowStateless_RateUnit_Enum) Enum() *ChaosBackgroundTrafficFlowStateless_RateUnit_Enum {
	p := new(ChaosBackgroundTrafficFlowStateless_RateUnit_Enum)
	*p = x
	return p
}

func (x ChaosBackgroundTrafficFlowStateless_RateUnit_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChaosBackgroundTrafficFlowStateless_RateUnit_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[18].Descriptor()
}

func (ChaosBackgroundTrafficFlowStateless_RateUnit_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[18]
}

func (x ChaosBackgroundTrafficFlowStateless_RateUnit_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowStateless_RateUnit_Enum.Descriptor instead.
func (ChaosBackgroundTrafficFlowStateless_RateUnit_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{56, 0, 0}
}

type ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum int32

const (
	ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_unspecified ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum = 0
	ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_tcp         ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum = 1
	ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_udp         ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum = 2
)

// Enum value maps for ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum.
var (
	ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum_name = map[int32]string{
		0: "unspecified",
		1: "tcp",
		2: "udp",
	}
	ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum_value = map[string]int32{
		"unspecified": 0,
		"tcp":         1,
		"udp":         2,
	}
)

func (x ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum) Enum() *ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum {
	p := new(ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum)
	*p = x
	return p
}

func (x ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_onexdatamodel_proto_enumTypes[19].Descriptor()
}

func (ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum) Type() protoreflect.EnumType {
	return &file_onexdatamodel_proto_enumTypes[19]
}

func (x ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum.Descriptor instead.
func (ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum) EnumDescriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{57, 0, 0}
}

type OpenApiMsgOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiMsgOpt) Reset() {
	*x = OpenApiMsgOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiMsgOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiMsgOpt) ProtoMessage() {}

func (x *OpenApiMsgOpt) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiMsgOpt.ProtoReflect.Descriptor instead.
func (*OpenApiMsgOpt) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{0}
}

func (x *OpenApiMsgOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenApiFldOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default     string `protobuf:"bytes,10,opt,name=default,proto3" json:"default,omitempty"`
	Description string `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiFldOpt) Reset() {
	*x = OpenApiFldOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiFldOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiFldOpt) ProtoMessage() {}

func (x *OpenApiFldOpt) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiFldOpt.ProtoReflect.Descriptor instead.
func (*OpenApiFldOpt) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{1}
}

func (x *OpenApiFldOpt) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *OpenApiFldOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenApiSvcOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiSvcOpt) Reset() {
	*x = OpenApiSvcOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiSvcOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiSvcOpt) ProtoMessage() {}

func (x *OpenApiSvcOpt) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiSvcOpt.ProtoReflect.Descriptor instead.
func (*OpenApiSvcOpt) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{2}
}

func (x *OpenApiSvcOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OpenApiRpcOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *OpenApiRpcOpt) Reset() {
	*x = OpenApiRpcOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenApiRpcOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenApiRpcOpt) ProtoMessage() {}

func (x *OpenApiRpcOpt) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenApiRpcOpt.ProtoReflect.Descriptor instead.
func (*OpenApiRpcOpt) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{3}
}

func (x *OpenApiRpcOpt) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GlobalNamedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *GlobalNamedObject) Reset() {
	*x = GlobalNamedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalNamedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalNamedObject) ProtoMessage() {}

func (x *GlobalNamedObject) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalNamedObject.ProtoReflect.Descriptor instead.
func (*GlobalNamedObject) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{4}
}

func (x *GlobalNamedObject) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ErrorDetails) Reset() {
	*x = ErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetails) ProtoMessage() {}

func (x *ErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetails.ProtoReflect.Descriptor instead.
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorDetails) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type WarningDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warnings []string `protobuf:"bytes,1,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *WarningDetails) Reset() {
	*x = WarningDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningDetails) ProtoMessage() {}

func (x *WarningDetails) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningDetails.ProtoReflect.Descriptor instead.
func (*WarningDetails) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{6}
}

func (x *WarningDetails) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{7}
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Config `protobuf:"bytes,1,opt,name=config,proto3,oneof" json:"config,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type ExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExperimentRequest) Reset() {
	*x = ExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentRequest) ProtoMessage() {}

func (x *ExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentRequest.ProtoReflect.Descriptor instead.
func (*ExperimentRequest) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{9}
}

type MetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{10}
}

type MetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jct         *float32                     `protobuf:"fixed32,1,opt,name=jct,proto3,oneof" json:"jct,omitempty"`
	FlowResults []*MetricsResponseFlowResult `protobuf:"bytes,2,rep,name=flow_results,json=flowResults,proto3" json:"flow_results,omitempty"`
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{11}
}

func (x *MetricsResponse) GetJct() float32 {
	if x != nil && x.Jct != nil {
		return *x.Jct
	}
	return 0
}

func (x *MetricsResponse) GetFlowResults() []*MetricsResponseFlowResult {
	if x != nil {
		return x.FlowResults
	}
	return nil
}

type MetricsResponseFlowResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadName *string                           `protobuf:"bytes,1,opt,name=workload_name,json=workloadName,proto3,oneof" json:"workload_name,omitempty"`
	FlowNumber   *int32                            `protobuf:"varint,2,opt,name=flow_number,json=flowNumber,proto3,oneof" json:"flow_number,omitempty"`
	FromHostName *string                           `protobuf:"bytes,3,opt,name=from_host_name,json=fromHostName,proto3,oneof" json:"from_host_name,omitempty"`
	ToHostName   *string                           `protobuf:"bytes,4,opt,name=to_host_name,json=toHostName,proto3,oneof" json:"to_host_name,omitempty"`
	Fct          *float32                          `protobuf:"fixed32,5,opt,name=fct,proto3,oneof" json:"fct,omitempty"`
	TcpInfo      *MetricsResponseFlowResultTcpInfo `protobuf:"bytes,6,opt,name=tcp_info,json=tcpInfo,proto3,oneof" json:"tcp_info,omitempty"`
}

func (x *MetricsResponseFlowResult) Reset() {
	*x = MetricsResponseFlowResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponseFlowResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponseFlowResult) ProtoMessage() {}

func (x *MetricsResponseFlowResult) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponseFlowResult.ProtoReflect.Descriptor instead.
func (*MetricsResponseFlowResult) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{12}
}

func (x *MetricsResponseFlowResult) GetWorkloadName() string {
	if x != nil && x.WorkloadName != nil {
		return *x.WorkloadName
	}
	return ""
}

func (x *MetricsResponseFlowResult) GetFlowNumber() int32 {
	if x != nil && x.FlowNumber != nil {
		return *x.FlowNumber
	}
	return 0
}

func (x *MetricsResponseFlowResult) GetFromHostName() string {
	if x != nil && x.FromHostName != nil {
		return *x.FromHostName
	}
	return ""
}

func (x *MetricsResponseFlowResult) GetToHostName() string {
	if x != nil && x.ToHostName != nil {
		return *x.ToHostName
	}
	return ""
}

func (x *MetricsResponseFlowResult) GetFct() float32 {
	if x != nil && x.Fct != nil {
		return *x.Fct
	}
	return 0
}

func (x *MetricsResponseFlowResult) GetTcpInfo() *MetricsResponseFlowResultTcpInfo {
	if x != nil {
		return x.TcpInfo
	}
	return nil
}

type MetricsResponseFlowResultTcpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rtt             *float32 `protobuf:"fixed32,1,opt,name=rtt,proto3,oneof" json:"rtt,omitempty"`
	RttVariance     *float32 `protobuf:"fixed32,2,opt,name=rtt_variance,json=rttVariance,proto3,oneof" json:"rtt_variance,omitempty"`
	Retransmissions *float32 `protobuf:"fixed32,3,opt,name=retransmissions,proto3,oneof" json:"retransmissions,omitempty"`
}

func (x *MetricsResponseFlowResultTcpInfo) Reset() {
	*x = MetricsResponseFlowResultTcpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponseFlowResultTcpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponseFlowResultTcpInfo) ProtoMessage() {}

func (x *MetricsResponseFlowResultTcpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponseFlowResultTcpInfo.ProtoReflect.Descriptor instead.
func (*MetricsResponseFlowResultTcpInfo) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{13}
}

func (x *MetricsResponseFlowResultTcpInfo) GetRtt() float32 {
	if x != nil && x.Rtt != nil {
		return *x.Rtt
	}
	return 0
}

func (x *MetricsResponseFlowResultTcpInfo) GetRttVariance() float32 {
	if x != nil && x.RttVariance != nil {
		return *x.RttVariance
	}
	return 0
}

func (x *MetricsResponseFlowResultTcpInfo) GetRetransmissions() float32 {
	if x != nil && x.Retransmissions != nil {
		return *x.Retransmissions
	}
	return 0
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts    []*Host   `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Fabric   *Fabric   `protobuf:"bytes,2,opt,name=fabric,proto3,oneof" json:"fabric,omitempty"`
	Dataflow *Dataflow `protobuf:"bytes,3,opt,name=dataflow,proto3,oneof" json:"dataflow,omitempty"`
	Chaos    *Chaos    `protobuf:"bytes,4,opt,name=chaos,proto3,oneof" json:"chaos,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{14}
}

func (x *Config) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Config) GetFabric() *Fabric {
	if x != nil {
		return x.Fabric
	}
	return nil
}

func (x *Config) GetDataflow() *Dataflow {
	if x != nil {
		return x.Dataflow
	}
	return nil
}

func (x *Config) GetChaos() *Chaos {
	if x != nil {
		return x.Chaos
	}
	return nil
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Prefix  *int32 `protobuf:"varint,3,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{15}
}

func (x *Host) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Host) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Host) GetPrefix() int32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

type Fabric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice       *Fabric_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=onexdatamodel.Fabric_Choice_Enum,oneof" json:"choice,omitempty"`
	SpinePodRack *FabricSpinePodRack `protobuf:"bytes,2,opt,name=spine_pod_rack,json=spinePodRack,proto3,oneof" json:"spine_pod_rack,omitempty"`
	QosProfiles  []*FabricQosProfile `protobuf:"bytes,3,rep,name=qos_profiles,json=qosProfiles,proto3" json:"qos_profiles,omitempty"`
}

func (x *Fabric) Reset() {
	*x = Fabric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fabric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fabric) ProtoMessage() {}

func (x *Fabric) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fabric.ProtoReflect.Descriptor instead.
func (*Fabric) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{16}
}

func (x *Fabric) GetChoice() Fabric_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return Fabric_Choice_unspecified
}

func (x *Fabric) GetSpinePodRack() *FabricSpinePodRack {
	if x != nil {
		return x.SpinePodRack
	}
	return nil
}

func (x *Fabric) GetQosProfiles() []*FabricQosProfile {
	if x != nil {
		return x.QosProfiles
	}
	return nil
}

type FabricSpinePodRack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spines       []*FabricSpine       `protobuf:"bytes,1,rep,name=spines,proto3" json:"spines,omitempty"`
	Pods         []*FabricPod         `protobuf:"bytes,2,rep,name=pods,proto3" json:"pods,omitempty"`
	HostLinks    []*SwitchHostLink    `protobuf:"bytes,3,rep,name=host_links,json=hostLinks,proto3" json:"host_links,omitempty"`
	PodProfiles  []*FabricPodProfile  `protobuf:"bytes,4,rep,name=pod_profiles,json=podProfiles,proto3" json:"pod_profiles,omitempty"`
	RackProfiles []*FabricRackProfile `protobuf:"bytes,5,rep,name=rack_profiles,json=rackProfiles,proto3" json:"rack_profiles,omitempty"`
}

func (x *FabricSpinePodRack) Reset() {
	*x = FabricSpinePodRack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricSpinePodRack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricSpinePodRack) ProtoMessage() {}

func (x *FabricSpinePodRack) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricSpinePodRack.ProtoReflect.Descriptor instead.
func (*FabricSpinePodRack) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{17}
}

func (x *FabricSpinePodRack) GetSpines() []*FabricSpine {
	if x != nil {
		return x.Spines
	}
	return nil
}

func (x *FabricSpinePodRack) GetPods() []*FabricPod {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *FabricSpinePodRack) GetHostLinks() []*SwitchHostLink {
	if x != nil {
		return x.HostLinks
	}
	return nil
}

func (x *FabricSpinePodRack) GetPodProfiles() []*FabricPodProfile {
	if x != nil {
		return x.PodProfiles
	}
	return nil
}

func (x *FabricSpinePodRack) GetRackProfiles() []*FabricRackProfile {
	if x != nil {
		return x.RackProfiles
	}
	return nil
}

type FabricSpine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count            *int32                             `protobuf:"varint,1,opt,name=count,proto3,oneof" json:"count,omitempty"`
	DownlinkEcmpMode *FabricSpine_DownlinkEcmpMode_Enum `protobuf:"varint,2,opt,name=downlink_ecmp_mode,json=downlinkEcmpMode,proto3,enum=onexdatamodel.FabricSpine_DownlinkEcmpMode_Enum,oneof" json:"downlink_ecmp_mode,omitempty"`
	QosProfileName   *string                            `protobuf:"bytes,3,opt,name=qos_profile_name,json=qosProfileName,proto3,oneof" json:"qos_profile_name,omitempty"`
}

func (x *FabricSpine) Reset() {
	*x = FabricSpine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricSpine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricSpine) ProtoMessage() {}

func (x *FabricSpine) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricSpine.ProtoReflect.Descriptor instead.
func (*FabricSpine) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{18}
}

func (x *FabricSpine) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *FabricSpine) GetDownlinkEcmpMode() FabricSpine_DownlinkEcmpMode_Enum {
	if x != nil && x.DownlinkEcmpMode != nil {
		return *x.DownlinkEcmpMode
	}
	return FabricSpine_DownlinkEcmpMode_unspecified
}

func (x *FabricSpine) GetQosProfileName() string {
	if x != nil && x.QosProfileName != nil {
		return *x.QosProfileName
	}
	return ""
}

type FabricPod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count          *int32   `protobuf:"varint,1,opt,name=count,proto3,oneof" json:"count,omitempty"`
	PodProfileName []string `protobuf:"bytes,2,rep,name=pod_profile_name,json=podProfileName,proto3" json:"pod_profile_name,omitempty"`
}

func (x *FabricPod) Reset() {
	*x = FabricPod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricPod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricPod) ProtoMessage() {}

func (x *FabricPod) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricPod.ProtoReflect.Descriptor instead.
func (*FabricPod) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{19}
}

func (x *FabricPod) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *FabricPod) GetPodProfileName() []string {
	if x != nil {
		return x.PodProfileName
	}
	return nil
}

type FabricPodProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string          `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	PodSwitch *FabricPodSwitch `protobuf:"bytes,2,opt,name=pod_switch,json=podSwitch,proto3,oneof" json:"pod_switch,omitempty"`
	Rack      *FabricRack      `protobuf:"bytes,3,opt,name=rack,proto3,oneof" json:"rack,omitempty"`
}

func (x *FabricPodProfile) Reset() {
	*x = FabricPodProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricPodProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricPodProfile) ProtoMessage() {}

func (x *FabricPodProfile) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricPodProfile.ProtoReflect.Descriptor instead.
func (*FabricPodProfile) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{20}
}

func (x *FabricPodProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FabricPodProfile) GetPodSwitch() *FabricPodSwitch {
	if x != nil {
		return x.PodSwitch
	}
	return nil
}

func (x *FabricPodProfile) GetRack() *FabricRack {
	if x != nil {
		return x.Rack
	}
	return nil
}

type FabricPodSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count                      *int32                                 `protobuf:"varint,1,opt,name=count,proto3,oneof" json:"count,omitempty"`
	PodToSpineOversubscription *string                                `protobuf:"bytes,2,opt,name=pod_to_spine_oversubscription,json=podToSpineOversubscription,proto3,oneof" json:"pod_to_spine_oversubscription,omitempty"`
	UplinkEcmpMode             *FabricPodSwitch_UplinkEcmpMode_Enum   `protobuf:"varint,3,opt,name=uplink_ecmp_mode,json=uplinkEcmpMode,proto3,enum=onexdatamodel.FabricPodSwitch_UplinkEcmpMode_Enum,oneof" json:"uplink_ecmp_mode,omitempty"`
	DownlinkEcmpMode           *FabricPodSwitch_DownlinkEcmpMode_Enum `protobuf:"varint,4,opt,name=downlink_ecmp_mode,json=downlinkEcmpMode,proto3,enum=onexdatamodel.FabricPodSwitch_DownlinkEcmpMode_Enum,oneof" json:"downlink_ecmp_mode,omitempty"`
	QosProfileName             *string                                `protobuf:"bytes,5,opt,name=qos_profile_name,json=qosProfileName,proto3,oneof" json:"qos_profile_name,omitempty"`
}

func (x *FabricPodSwitch) Reset() {
	*x = FabricPodSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricPodSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricPodSwitch) ProtoMessage() {}

func (x *FabricPodSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricPodSwitch.ProtoReflect.Descriptor instead.
func (*FabricPodSwitch) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{21}
}

func (x *FabricPodSwitch) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *FabricPodSwitch) GetPodToSpineOversubscription() string {
	if x != nil && x.PodToSpineOversubscription != nil {
		return *x.PodToSpineOversubscription
	}
	return ""
}

func (x *FabricPodSwitch) GetUplinkEcmpMode() FabricPodSwitch_UplinkEcmpMode_Enum {
	if x != nil && x.UplinkEcmpMode != nil {
		return *x.UplinkEcmpMode
	}
	return FabricPodSwitch_UplinkEcmpMode_unspecified
}

func (x *FabricPodSwitch) GetDownlinkEcmpMode() FabricPodSwitch_DownlinkEcmpMode_Enum {
	if x != nil && x.DownlinkEcmpMode != nil {
		return *x.DownlinkEcmpMode
	}
	return FabricPodSwitch_DownlinkEcmpMode_unspecified
}

func (x *FabricPodSwitch) GetQosProfileName() string {
	if x != nil && x.QosProfileName != nil {
		return *x.QosProfileName
	}
	return ""
}

type FabricRack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count            *int32   `protobuf:"varint,1,opt,name=count,proto3,oneof" json:"count,omitempty"`
	RackProfileNames []string `protobuf:"bytes,2,rep,name=rack_profile_names,json=rackProfileNames,proto3" json:"rack_profile_names,omitempty"`
}

func (x *FabricRack) Reset() {
	*x = FabricRack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricRack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricRack) ProtoMessage() {}

func (x *FabricRack) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricRack.ProtoReflect.Descriptor instead.
func (*FabricRack) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{22}
}

func (x *FabricRack) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *FabricRack) GetRackProfileNames() []string {
	if x != nil {
		return x.RackProfileNames
	}
	return nil
}

type FabricRackProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     *string                                     `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	TorUplinkEcmpMode        *FabricRackProfile_TorUplinkEcmpMode_Enum   `protobuf:"varint,2,opt,name=tor_uplink_ecmp_mode,json=torUplinkEcmpMode,proto3,enum=onexdatamodel.FabricRackProfile_TorUplinkEcmpMode_Enum,oneof" json:"tor_uplink_ecmp_mode,omitempty"`
	TorDownlinkEcmpMode      *FabricRackProfile_TorDownlinkEcmpMode_Enum `protobuf:"varint,3,opt,name=tor_downlink_ecmp_mode,json=torDownlinkEcmpMode,proto3,enum=onexdatamodel.FabricRackProfile_TorDownlinkEcmpMode_Enum,oneof" json:"tor_downlink_ecmp_mode,omitempty"`
	TorQosProfileName        *string                                     `protobuf:"bytes,4,opt,name=tor_qos_profile_name,json=torQosProfileName,proto3,oneof" json:"tor_qos_profile_name,omitempty"`
	TorToPodOversubscription *string                                     `protobuf:"bytes,5,opt,name=tor_to_pod_oversubscription,json=torToPodOversubscription,proto3,oneof" json:"tor_to_pod_oversubscription,omitempty"`
}

func (x *FabricRackProfile) Reset() {
	*x = FabricRackProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricRackProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricRackProfile) ProtoMessage() {}

func (x *FabricRackProfile) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricRackProfile.ProtoReflect.Descriptor instead.
func (*FabricRackProfile) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{23}
}

func (x *FabricRackProfile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FabricRackProfile) GetTorUplinkEcmpMode() FabricRackProfile_TorUplinkEcmpMode_Enum {
	if x != nil && x.TorUplinkEcmpMode != nil {
		return *x.TorUplinkEcmpMode
	}
	return FabricRackProfile_TorUplinkEcmpMode_unspecified
}

func (x *FabricRackProfile) GetTorDownlinkEcmpMode() FabricRackProfile_TorDownlinkEcmpMode_Enum {
	if x != nil && x.TorDownlinkEcmpMode != nil {
		return *x.TorDownlinkEcmpMode
	}
	return FabricRackProfile_TorDownlinkEcmpMode_unspecified
}

func (x *FabricRackProfile) GetTorQosProfileName() string {
	if x != nil && x.TorQosProfileName != nil {
		return *x.TorQosProfileName
	}
	return ""
}

func (x *FabricRackProfile) GetTorToPodOversubscription() string {
	if x != nil && x.TorToPodOversubscription != nil {
		return *x.TorToPodOversubscription
	}
	return ""
}

type FabricQosProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IngressAdmission     *FabricQosProfileIngressAdmission     `protobuf:"bytes,2,opt,name=ingress_admission,json=ingressAdmission,proto3,oneof" json:"ingress_admission,omitempty"`
	Scheduler            *FabricQosProfileScheduler            `protobuf:"bytes,3,opt,name=scheduler,proto3,oneof" json:"scheduler,omitempty"`
	PacketClassification *FabricQosProfilePacketClassification `protobuf:"bytes,4,opt,name=packet_classification,json=packetClassification,proto3,oneof" json:"packet_classification,omitempty"`
}

func (x *FabricQosProfile) Reset() {
	*x = FabricQosProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricQosProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricQosProfile) ProtoMessage() {}

func (x *FabricQosProfile) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricQosProfile.ProtoReflect.Descriptor instead.
func (*FabricQosProfile) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{24}
}

func (x *FabricQosProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FabricQosProfile) GetIngressAdmission() *FabricQosProfileIngressAdmission {
	if x != nil {
		return x.IngressAdmission
	}
	return nil
}

func (x *FabricQosProfile) GetScheduler() *FabricQosProfileScheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *FabricQosProfile) GetPacketClassification() *FabricQosProfilePacketClassification {
	if x != nil {
		return x.PacketClassification
	}
	return nil
}

type FabricQosProfileIngressAdmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReservedBufferBytes *int32 `protobuf:"varint,1,opt,name=reserved_buffer_bytes,json=reservedBufferBytes,proto3,oneof" json:"reserved_buffer_bytes,omitempty"`
	SharedBufferBytes   *int32 `protobuf:"varint,2,opt,name=shared_buffer_bytes,json=sharedBufferBytes,proto3,oneof" json:"shared_buffer_bytes,omitempty"`
}

func (x *FabricQosProfileIngressAdmission) Reset() {
	*x = FabricQosProfileIngressAdmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricQosProfileIngressAdmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricQosProfileIngressAdmission) ProtoMessage() {}

func (x *FabricQosProfileIngressAdmission) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricQosProfileIngressAdmission.ProtoReflect.Descriptor instead.
func (*FabricQosProfileIngressAdmission) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{25}
}

func (x *FabricQosProfileIngressAdmission) GetReservedBufferBytes() int32 {
	if x != nil && x.ReservedBufferBytes != nil {
		return *x.ReservedBufferBytes
	}
	return 0
}

func (x *FabricQosProfileIngressAdmission) GetSharedBufferBytes() int32 {
	if x != nil && x.SharedBufferBytes != nil {
		return *x.SharedBufferBytes
	}
	return 0
}

type FabricQosProfileScheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerMode *FabricQosProfileScheduler_SchedulerMode_Enum `protobuf:"varint,1,opt,name=scheduler_mode,json=schedulerMode,proto3,enum=onexdatamodel.FabricQosProfileScheduler_SchedulerMode_Enum,oneof" json:"scheduler_mode,omitempty"`
	WeightList    []int32                                       `protobuf:"varint,2,rep,packed,name=weight_list,json=weightList,proto3" json:"weight_list,omitempty"`
}

func (x *FabricQosProfileScheduler) Reset() {
	*x = FabricQosProfileScheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricQosProfileScheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricQosProfileScheduler) ProtoMessage() {}

func (x *FabricQosProfileScheduler) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricQosProfileScheduler.ProtoReflect.Descriptor instead.
func (*FabricQosProfileScheduler) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{26}
}

func (x *FabricQosProfileScheduler) GetSchedulerMode() FabricQosProfileScheduler_SchedulerMode_Enum {
	if x != nil && x.SchedulerMode != nil {
		return *x.SchedulerMode
	}
	return FabricQosProfileScheduler_SchedulerMode_unspecified
}

func (x *FabricQosProfileScheduler) GetWeightList() []int32 {
	if x != nil {
		return x.WeightList
	}
	return nil
}

type FabricQosProfilePacketClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapDscpToTrafficClass  *FabricQosProfilePacketClassificationMap `protobuf:"bytes,1,opt,name=map_dscp_to_traffic_class,json=mapDscpToTrafficClass,proto3,oneof" json:"map_dscp_to_traffic_class,omitempty"`
	MapTrafficClassToQueue *FabricQosProfilePacketClassificationMap `protobuf:"bytes,2,opt,name=map_traffic_class_to_queue,json=mapTrafficClassToQueue,proto3,oneof" json:"map_traffic_class_to_queue,omitempty"`
}

func (x *FabricQosProfilePacketClassification) Reset() {
	*x = FabricQosProfilePacketClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricQosProfilePacketClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricQosProfilePacketClassification) ProtoMessage() {}

func (x *FabricQosProfilePacketClassification) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricQosProfilePacketClassification.ProtoReflect.Descriptor instead.
func (*FabricQosProfilePacketClassification) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{27}
}

func (x *FabricQosProfilePacketClassification) GetMapDscpToTrafficClass() *FabricQosProfilePacketClassificationMap {
	if x != nil {
		return x.MapDscpToTrafficClass
	}
	return nil
}

func (x *FabricQosProfilePacketClassification) GetMapTrafficClassToQueue() *FabricQosProfilePacketClassificationMap {
	if x != nil {
		return x.MapTrafficClassToQueue
	}
	return nil
}

type FabricQosProfilePacketClassificationMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FabricQosProfilePacketClassificationMap) Reset() {
	*x = FabricQosProfilePacketClassificationMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricQosProfilePacketClassificationMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricQosProfilePacketClassificationMap) ProtoMessage() {}

func (x *FabricQosProfilePacketClassificationMap) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricQosProfilePacketClassificationMap.ProtoReflect.Descriptor instead.
func (*FabricQosProfilePacketClassificationMap) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{28}
}

type SwitchHostLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName       string                      `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	FrontPanelPort *int32                      `protobuf:"varint,2,opt,name=front_panel_port,json=frontPanelPort,proto3,oneof" json:"front_panel_port,omitempty"`
	Choice         *SwitchHostLink_Choice_Enum `protobuf:"varint,3,opt,name=choice,proto3,enum=onexdatamodel.SwitchHostLink_Choice_Enum,oneof" json:"choice,omitempty"`
	Spine          *int32                      `protobuf:"varint,4,opt,name=spine,proto3,oneof" json:"spine,omitempty"`
	Pod            *SwitchHostLinkSwitchRef    `protobuf:"bytes,5,opt,name=pod,proto3,oneof" json:"pod,omitempty"`
	Rack           *SwitchHostLinkSwitchRef    `protobuf:"bytes,6,opt,name=rack,proto3,oneof" json:"rack,omitempty"`
}

func (x *SwitchHostLink) Reset() {
	*x = SwitchHostLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchHostLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchHostLink) ProtoMessage() {}

func (x *SwitchHostLink) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchHostLink.ProtoReflect.Descriptor instead.
func (*SwitchHostLink) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{29}
}

func (x *SwitchHostLink) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *SwitchHostLink) GetFrontPanelPort() int32 {
	if x != nil && x.FrontPanelPort != nil {
		return *x.FrontPanelPort
	}
	return 0
}

func (x *SwitchHostLink) GetChoice() SwitchHostLink_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return SwitchHostLink_Choice_unspecified
}

func (x *SwitchHostLink) GetSpine() int32 {
	if x != nil && x.Spine != nil {
		return *x.Spine
	}
	return 0
}

func (x *SwitchHostLink) GetPod() *SwitchHostLinkSwitchRef {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *SwitchHostLink) GetRack() *SwitchHostLinkSwitchRef {
	if x != nil {
		return x.Rack
	}
	return nil
}

type SwitchHostLinkSwitchRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodIndex    *int32 `protobuf:"varint,1,opt,name=pod_index,json=podIndex,proto3,oneof" json:"pod_index,omitempty"`
	SwitchIndex *int32 `protobuf:"varint,2,opt,name=switch_index,json=switchIndex,proto3,oneof" json:"switch_index,omitempty"`
}

func (x *SwitchHostLinkSwitchRef) Reset() {
	*x = SwitchHostLinkSwitchRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchHostLinkSwitchRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchHostLinkSwitchRef) ProtoMessage() {}

func (x *SwitchHostLinkSwitchRef) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchHostLinkSwitchRef.ProtoReflect.Descriptor instead.
func (*SwitchHostLinkSwitchRef) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{30}
}

func (x *SwitchHostLinkSwitchRef) GetPodIndex() int32 {
	if x != nil && x.PodIndex != nil {
		return *x.PodIndex
	}
	return 0
}

func (x *SwitchHostLinkSwitchRef) GetSwitchIndex() int32 {
	if x != nil && x.SwitchIndex != nil {
		return *x.SwitchIndex
	}
	return 0
}

type Dataflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostManagement []*DataflowHostManagement `protobuf:"bytes,1,rep,name=host_management,json=hostManagement,proto3" json:"host_management,omitempty"`
	Workload       []*DataflowWorkloadItem   `protobuf:"bytes,2,rep,name=workload,proto3" json:"workload,omitempty"`
	FlowProfiles   []*DataflowFlowProfile    `protobuf:"bytes,3,rep,name=flow_profiles,json=flowProfiles,proto3" json:"flow_profiles,omitempty"`
}

func (x *Dataflow) Reset() {
	*x = Dataflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dataflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dataflow) ProtoMessage() {}

func (x *Dataflow) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dataflow.ProtoReflect.Descriptor instead.
func (*Dataflow) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{31}
}

func (x *Dataflow) GetHostManagement() []*DataflowHostManagement {
	if x != nil {
		return x.HostManagement
	}
	return nil
}

func (x *Dataflow) GetWorkload() []*DataflowWorkloadItem {
	if x != nil {
		return x.Workload
	}
	return nil
}

func (x *Dataflow) GetFlowProfiles() []*DataflowFlowProfile {
	if x != nil {
		return x.FlowProfiles
	}
	return nil
}

type DataflowFlowProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataSize         int32                                      `protobuf:"varint,2,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	L2ProtocolChoice *DataflowFlowProfile_L2ProtocolChoice_Enum `protobuf:"varint,3,opt,name=l2_protocol_choice,json=l2ProtocolChoice,proto3,enum=onexdatamodel.DataflowFlowProfile_L2ProtocolChoice_Enum,oneof" json:"l2_protocol_choice,omitempty"`
	Ethernet         *DataflowFlowProfileEthernet               `protobuf:"bytes,4,opt,name=ethernet,proto3,oneof" json:"ethernet,omitempty"`
	L4ProtocolChoice *DataflowFlowProfile_L4ProtocolChoice_Enum `protobuf:"varint,5,opt,name=l4_protocol_choice,json=l4ProtocolChoice,proto3,enum=onexdatamodel.DataflowFlowProfile_L4ProtocolChoice_Enum,oneof" json:"l4_protocol_choice,omitempty"`
	Tcp              *DataflowFlowProfileTcp                    `protobuf:"bytes,6,opt,name=tcp,proto3,oneof" json:"tcp,omitempty"`
	Udp              *DataflowFlowProfileUdp                    `protobuf:"bytes,7,opt,name=udp,proto3,oneof" json:"udp,omitempty"`
}

func (x *DataflowFlowProfile) Reset() {
	*x = DataflowFlowProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfile) ProtoMessage() {}

func (x *DataflowFlowProfile) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfile.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfile) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{32}
}

func (x *DataflowFlowProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataflowFlowProfile) GetDataSize() int32 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *DataflowFlowProfile) GetL2ProtocolChoice() DataflowFlowProfile_L2ProtocolChoice_Enum {
	if x != nil && x.L2ProtocolChoice != nil {
		return *x.L2ProtocolChoice
	}
	return DataflowFlowProfile_L2ProtocolChoice_unspecified
}

func (x *DataflowFlowProfile) GetEthernet() *DataflowFlowProfileEthernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *DataflowFlowProfile) GetL4ProtocolChoice() DataflowFlowProfile_L4ProtocolChoice_Enum {
	if x != nil && x.L4ProtocolChoice != nil {
		return *x.L4ProtocolChoice
	}
	return DataflowFlowProfile_L4ProtocolChoice_unspecified
}

func (x *DataflowFlowProfile) GetTcp() *DataflowFlowProfileTcp {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *DataflowFlowProfile) GetUdp() *DataflowFlowProfileUdp {
	if x != nil {
		return x.Udp
	}
	return nil
}

type DataflowFlowProfileEthernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu *int32 `protobuf:"varint,1,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
}

func (x *DataflowFlowProfileEthernet) Reset() {
	*x = DataflowFlowProfileEthernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfileEthernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfileEthernet) ProtoMessage() {}

func (x *DataflowFlowProfileEthernet) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfileEthernet.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfileEthernet) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{33}
}

func (x *DataflowFlowProfileEthernet) GetMtu() int32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

type DataflowFlowProfileTcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Congestionalgorithm *DataflowFlowProfileTcp_CongestionAlgorithm_Enum `protobuf:"varint,1,opt,name=congestionalgorithm,proto3,enum=onexdatamodel.DataflowFlowProfileTcp_CongestionAlgorithm_Enum,oneof" json:"congestionalgorithm,omitempty"`
	Initcwnd            *int32                                           `protobuf:"varint,2,opt,name=initcwnd,proto3,oneof" json:"initcwnd,omitempty"`
	Sendbuf             *int32                                           `protobuf:"varint,3,opt,name=sendbuf,proto3,oneof" json:"sendbuf,omitempty"`
	Receivebuf          *int32                                           `protobuf:"varint,4,opt,name=receivebuf,proto3,oneof" json:"receivebuf,omitempty"`
	Destinationport     *L4PortRange                                     `protobuf:"bytes,5,opt,name=destinationport,proto3,oneof" json:"destinationport,omitempty"`
	Sourceport          *L4PortRange                                     `protobuf:"bytes,6,opt,name=sourceport,proto3,oneof" json:"sourceport,omitempty"`
}

func (x *DataflowFlowProfileTcp) Reset() {
	*x = DataflowFlowProfileTcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfileTcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfileTcp) ProtoMessage() {}

func (x *DataflowFlowProfileTcp) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfileTcp.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfileTcp) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{34}
}

func (x *DataflowFlowProfileTcp) GetCongestionalgorithm() DataflowFlowProfileTcp_CongestionAlgorithm_Enum {
	if x != nil && x.Congestionalgorithm != nil {
		return *x.Congestionalgorithm
	}
	return DataflowFlowProfileTcp_CongestionAlgorithm_unspecified
}

func (x *DataflowFlowProfileTcp) GetInitcwnd() int32 {
	if x != nil && x.Initcwnd != nil {
		return *x.Initcwnd
	}
	return 0
}

func (x *DataflowFlowProfileTcp) GetSendbuf() int32 {
	if x != nil && x.Sendbuf != nil {
		return *x.Sendbuf
	}
	return 0
}

func (x *DataflowFlowProfileTcp) GetReceivebuf() int32 {
	if x != nil && x.Receivebuf != nil {
		return *x.Receivebuf
	}
	return 0
}

func (x *DataflowFlowProfileTcp) GetDestinationport() *L4PortRange {
	if x != nil {
		return x.Destinationport
	}
	return nil
}

func (x *DataflowFlowProfileTcp) GetSourceport() *L4PortRange {
	if x != nil {
		return x.Sourceport
	}
	return nil
}

type L4PortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice      *L4PortRange_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=onexdatamodel.L4PortRange_Choice_Enum,oneof" json:"choice,omitempty"`
	SingleValue *L4PortRangeSingleValue  `protobuf:"bytes,2,opt,name=single_value,json=singleValue,proto3,oneof" json:"single_value,omitempty"`
	Range       *L4PortRangeRange        `protobuf:"bytes,3,opt,name=range,proto3,oneof" json:"range,omitempty"`
}

func (x *L4PortRange) Reset() {
	*x = L4PortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L4PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L4PortRange) ProtoMessage() {}

func (x *L4PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L4PortRange.ProtoReflect.Descriptor instead.
func (*L4PortRange) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{35}
}

func (x *L4PortRange) GetChoice() L4PortRange_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return L4PortRange_Choice_unspecified
}

func (x *L4PortRange) GetSingleValue() *L4PortRangeSingleValue {
	if x != nil {
		return x.SingleValue
	}
	return nil
}

func (x *L4PortRange) GetRange() *L4PortRangeRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type L4PortRangeSingleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *int32 `protobuf:"varint,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *L4PortRangeSingleValue) Reset() {
	*x = L4PortRangeSingleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L4PortRangeSingleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L4PortRangeSingleValue) ProtoMessage() {}

func (x *L4PortRangeSingleValue) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L4PortRangeSingleValue.ProtoReflect.Descriptor instead.
func (*L4PortRangeSingleValue) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{36}
}

func (x *L4PortRangeSingleValue) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type L4PortRangeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartValue *int32 `protobuf:"varint,1,opt,name=start_value,json=startValue,proto3,oneof" json:"start_value,omitempty"`
	Increment  *int32 `protobuf:"varint,2,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
}

func (x *L4PortRangeRange) Reset() {
	*x = L4PortRangeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L4PortRangeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L4PortRangeRange) ProtoMessage() {}

func (x *L4PortRangeRange) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L4PortRangeRange.ProtoReflect.Descriptor instead.
func (*L4PortRangeRange) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{37}
}

func (x *L4PortRangeRange) GetStartValue() int32 {
	if x != nil && x.StartValue != nil {
		return *x.StartValue
	}
	return 0
}

func (x *L4PortRangeRange) GetIncrement() int32 {
	if x != nil && x.Increment != nil {
		return *x.Increment
	}
	return 0
}

type DataflowFlowProfileUdp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowFlowProfileUdp) Reset() {
	*x = DataflowFlowProfileUdp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfileUdp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfileUdp) ProtoMessage() {}

func (x *DataflowFlowProfileUdp) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfileUdp.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfileUdp) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{38}
}

type DataflowWorkloadItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Choice    DataflowWorkloadItem_Choice_Enum `protobuf:"varint,2,opt,name=choice,proto3,enum=onexdatamodel.DataflowWorkloadItem_Choice_Enum" json:"choice,omitempty"`
	Scatter   *DataflowScatterWorkload         `protobuf:"bytes,3,opt,name=scatter,proto3,oneof" json:"scatter,omitempty"`
	Gather    *DataflowGatherWorkload          `protobuf:"bytes,4,opt,name=gather,proto3,oneof" json:"gather,omitempty"`
	Loop      *DataflowLoopWorkload            `protobuf:"bytes,5,opt,name=loop,proto3,oneof" json:"loop,omitempty"`
	Compute   *DataflowComputeWorkload         `protobuf:"bytes,6,opt,name=compute,proto3,oneof" json:"compute,omitempty"`
	AllReduce *DataflowAllReduceWorkload       `protobuf:"bytes,7,opt,name=all_reduce,json=allReduce,proto3,oneof" json:"all_reduce,omitempty"`
	Broadcast *DataflowBroadcastWorkload       `protobuf:"bytes,8,opt,name=broadcast,proto3,oneof" json:"broadcast,omitempty"`
}

func (x *DataflowWorkloadItem) Reset() {
	*x = DataflowWorkloadItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowWorkloadItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowWorkloadItem) ProtoMessage() {}

func (x *DataflowWorkloadItem) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowWorkloadItem.ProtoReflect.Descriptor instead.
func (*DataflowWorkloadItem) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{39}
}

func (x *DataflowWorkloadItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataflowWorkloadItem) GetChoice() DataflowWorkloadItem_Choice_Enum {
	if x != nil {
		return x.Choice
	}
	return DataflowWorkloadItem_Choice_unspecified
}

func (x *DataflowWorkloadItem) GetScatter() *DataflowScatterWorkload {
	if x != nil {
		return x.Scatter
	}
	return nil
}

func (x *DataflowWorkloadItem) GetGather() *DataflowGatherWorkload {
	if x != nil {
		return x.Gather
	}
	return nil
}

func (x *DataflowWorkloadItem) GetLoop() *DataflowLoopWorkload {
	if x != nil {
		return x.Loop
	}
	return nil
}

func (x *DataflowWorkloadItem) GetCompute() *DataflowComputeWorkload {
	if x != nil {
		return x.Compute
	}
	return nil
}

func (x *DataflowWorkloadItem) GetAllReduce() *DataflowAllReduceWorkload {
	if x != nil {
		return x.AllReduce
	}
	return nil
}

func (x *DataflowWorkloadItem) GetBroadcast() *DataflowBroadcastWorkload {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

type DataflowScatterWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources         []string `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations    []string `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	FlowProfileName *string  `protobuf:"bytes,3,opt,name=flow_profile_name,json=flowProfileName,proto3,oneof" json:"flow_profile_name,omitempty"`
}

func (x *DataflowScatterWorkload) Reset() {
	*x = DataflowScatterWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowScatterWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowScatterWorkload) ProtoMessage() {}

func (x *DataflowScatterWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowScatterWorkload.ProtoReflect.Descriptor instead.
func (*DataflowScatterWorkload) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{40}
}

func (x *DataflowScatterWorkload) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *DataflowScatterWorkload) GetDestinations() []string {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *DataflowScatterWorkload) GetFlowProfileName() string {
	if x != nil && x.FlowProfileName != nil {
		return *x.FlowProfileName
	}
	return ""
}

type DataflowBroadcastWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources         []string `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations    []string `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	FlowProfileName *string  `protobuf:"bytes,3,opt,name=flow_profile_name,json=flowProfileName,proto3,oneof" json:"flow_profile_name,omitempty"`
}

func (x *DataflowBroadcastWorkload) Reset() {
	*x = DataflowBroadcastWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowBroadcastWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowBroadcastWorkload) ProtoMessage() {}

func (x *DataflowBroadcastWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowBroadcastWorkload.ProtoReflect.Descriptor instead.
func (*DataflowBroadcastWorkload) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{41}
}

func (x *DataflowBroadcastWorkload) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *DataflowBroadcastWorkload) GetDestinations() []string {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *DataflowBroadcastWorkload) GetFlowProfileName() string {
	if x != nil && x.FlowProfileName != nil {
		return *x.FlowProfileName
	}
	return ""
}

type DataflowGatherWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources         []string `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Destinations    []string `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	FlowProfileName *string  `protobuf:"bytes,3,opt,name=flow_profile_name,json=flowProfileName,proto3,oneof" json:"flow_profile_name,omitempty"`
}

func (x *DataflowGatherWorkload) Reset() {
	*x = DataflowGatherWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowGatherWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowGatherWorkload) ProtoMessage() {}

func (x *DataflowGatherWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowGatherWorkload.ProtoReflect.Descriptor instead.
func (*DataflowGatherWorkload) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{42}
}

func (x *DataflowGatherWorkload) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *DataflowGatherWorkload) GetDestinations() []string {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *DataflowGatherWorkload) GetFlowProfileName() string {
	if x != nil && x.FlowProfileName != nil {
		return *x.FlowProfileName
	}
	return ""
}

type DataflowAllReduceWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes           []string                             `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	FlowProfileName *string                              `protobuf:"bytes,2,opt,name=flow_profile_name,json=flowProfileName,proto3,oneof" json:"flow_profile_name,omitempty"`
	Type            *DataflowAllReduceWorkload_Type_Enum `protobuf:"varint,3,opt,name=type,proto3,enum=onexdatamodel.DataflowAllReduceWorkload_Type_Enum,oneof" json:"type,omitempty"`
}

func (x *DataflowAllReduceWorkload) Reset() {
	*x = DataflowAllReduceWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowAllReduceWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowAllReduceWorkload) ProtoMessage() {}

func (x *DataflowAllReduceWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowAllReduceWorkload.ProtoReflect.Descriptor instead.
func (*DataflowAllReduceWorkload) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{43}
}

func (x *DataflowAllReduceWorkload) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DataflowAllReduceWorkload) GetFlowProfileName() string {
	if x != nil && x.FlowProfileName != nil {
		return *x.FlowProfileName
	}
	return ""
}

func (x *DataflowAllReduceWorkload) GetType() DataflowAllReduceWorkload_Type_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DataflowAllReduceWorkload_Type_unspecified
}

type DataflowComputeWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes     []string                             `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Choice    *DataflowComputeWorkload_Choice_Enum `protobuf:"varint,2,opt,name=choice,proto3,enum=onexdatamodel.DataflowComputeWorkload_Choice_Enum,oneof" json:"choice,omitempty"`
	Simulated *DataflowSimulatedComputeWorkload    `protobuf:"bytes,3,opt,name=simulated,proto3,oneof" json:"simulated,omitempty"`
}

func (x *DataflowComputeWorkload) Reset() {
	*x = DataflowComputeWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowComputeWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowComputeWorkload) ProtoMessage() {}

func (x *DataflowComputeWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowComputeWorkload.ProtoReflect.Descriptor instead.
func (*DataflowComputeWorkload) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{44}
}

func (x *DataflowComputeWorkload) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DataflowComputeWorkload) GetChoice() DataflowComputeWorkload_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return DataflowComputeWorkload_Choice_unspecified
}

func (x *DataflowComputeWorkload) GetSimulated() *DataflowSimulatedComputeWorkload {
	if x != nil {
		return x.Simulated
	}
	return nil
}

type DataflowSimulatedComputeWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *float32 `protobuf:"fixed32,1,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
}

func (x *DataflowSimulatedComputeWorkload) Reset() {
	*x = DataflowSimulatedComputeWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowSimulatedComputeWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowSimulatedComputeWorkload) ProtoMessage() {}

func (x *DataflowSimulatedComputeWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowSimulatedComputeWorkload.ProtoReflect.Descriptor instead.
func (*DataflowSimulatedComputeWorkload) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{45}
}

func (x *DataflowSimulatedComputeWorkload) GetDuration() float32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

type DataflowLoopWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iterations *int32                  `protobuf:"varint,1,opt,name=iterations,proto3,oneof" json:"iterations,omitempty"`
	Children   []*DataflowWorkloadItem `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *DataflowLoopWorkload) Reset() {
	*x = DataflowLoopWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowLoopWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowLoopWorkload) ProtoMessage() {}

func (x *DataflowLoopWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowLoopWorkload.ProtoReflect.Descriptor instead.
func (*DataflowLoopWorkload) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{46}
}

func (x *DataflowLoopWorkload) GetIterations() int32 {
	if x != nil && x.Iterations != nil {
		return *x.Iterations
	}
	return 0
}

func (x *DataflowLoopWorkload) GetChildren() []*DataflowWorkloadItem {
	if x != nil {
		return x.Children
	}
	return nil
}

type DataflowHostManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName          string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	ManagementAddress string `protobuf:"bytes,2,opt,name=management_address,json=managementAddress,proto3" json:"management_address,omitempty"`
	NicName           string `protobuf:"bytes,3,opt,name=nic_name,json=nicName,proto3" json:"nic_name,omitempty"`
}

func (x *DataflowHostManagement) Reset() {
	*x = DataflowHostManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowHostManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowHostManagement) ProtoMessage() {}

func (x *DataflowHostManagement) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowHostManagement.ProtoReflect.Descriptor instead.
func (*DataflowHostManagement) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{47}
}

func (x *DataflowHostManagement) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *DataflowHostManagement) GetManagementAddress() string {
	if x != nil {
		return x.ManagementAddress
	}
	return ""
}

func (x *DataflowHostManagement) GetNicName() string {
	if x != nil {
		return x.NicName
	}
	return ""
}

type Chaos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundTraffic *ChaosBackgroundTraffic `protobuf:"bytes,1,opt,name=background_traffic,json=backgroundTraffic,proto3,oneof" json:"background_traffic,omitempty"`
}

func (x *Chaos) Reset() {
	*x = Chaos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chaos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chaos) ProtoMessage() {}

func (x *Chaos) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chaos.ProtoReflect.Descriptor instead.
func (*Chaos) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{48}
}

func (x *Chaos) GetBackgroundTraffic() *ChaosBackgroundTraffic {
	if x != nil {
		return x.BackgroundTraffic
	}
	return nil
}

type ChaosBackgroundTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flows []*ChaosBackgroundTrafficFlow `protobuf:"bytes,1,rep,name=flows,proto3" json:"flows,omitempty"`
}

func (x *ChaosBackgroundTraffic) Reset() {
	*x = ChaosBackgroundTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTraffic) ProtoMessage() {}

func (x *ChaosBackgroundTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTraffic.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTraffic) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{49}
}

func (x *ChaosBackgroundTraffic) GetFlows() []*ChaosBackgroundTrafficFlow {
	if x != nil {
		return x.Flows
	}
	return nil
}

type ChaosBackgroundTrafficFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string                                 `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	FabricEntryPoint *ChaosBackgroundTrafficFlowEntryPoint   `protobuf:"bytes,2,opt,name=fabric_entry_point,json=fabricEntryPoint,proto3,oneof" json:"fabric_entry_point,omitempty"`
	Choice           *ChaosBackgroundTrafficFlow_Choice_Enum `protobuf:"varint,3,opt,name=choice,proto3,enum=onexdatamodel.ChaosBackgroundTrafficFlow_Choice_Enum,oneof" json:"choice,omitempty"`
	Stateless        []*ChaosBackgroundTrafficFlowStateless  `protobuf:"bytes,4,rep,name=stateless,proto3" json:"stateless,omitempty"`
}

func (x *ChaosBackgroundTrafficFlow) Reset() {
	*x = ChaosBackgroundTrafficFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlow) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlow) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlow.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlow) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{50}
}

func (x *ChaosBackgroundTrafficFlow) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChaosBackgroundTrafficFlow) GetFabricEntryPoint() *ChaosBackgroundTrafficFlowEntryPoint {
	if x != nil {
		return x.FabricEntryPoint
	}
	return nil
}

func (x *ChaosBackgroundTrafficFlow) GetChoice() ChaosBackgroundTrafficFlow_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return ChaosBackgroundTrafficFlow_Choice_unspecified
}

func (x *ChaosBackgroundTrafficFlow) GetStateless() []*ChaosBackgroundTrafficFlowStateless {
	if x != nil {
		return x.Stateless
	}
	return nil
}

type ChaosBackgroundTrafficFlowEntryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice          *ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum    `protobuf:"varint,1,opt,name=choice,proto3,enum=onexdatamodel.ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum,oneof" json:"choice,omitempty"`
	SwitchReference *ChaosBackgroundTrafficFlowEntryPointSwitchReference `protobuf:"bytes,2,opt,name=switch_reference,json=switchReference,proto3,oneof" json:"switch_reference,omitempty"`
	FrontPanelPort  *ChaosBackgroundTrafficFlowEntryPointFrontPanelPort  `protobuf:"bytes,3,opt,name=front_panel_port,json=frontPanelPort,proto3,oneof" json:"front_panel_port,omitempty"`
}

func (x *ChaosBackgroundTrafficFlowEntryPoint) Reset() {
	*x = ChaosBackgroundTrafficFlowEntryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowEntryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowEntryPoint) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowEntryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowEntryPoint.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowEntryPoint) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{51}
}

func (x *ChaosBackgroundTrafficFlowEntryPoint) GetChoice() ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return ChaosBackgroundTrafficFlowEntryPoint_Choice_unspecified
}

func (x *ChaosBackgroundTrafficFlowEntryPoint) GetSwitchReference() *ChaosBackgroundTrafficFlowEntryPointSwitchReference {
	if x != nil {
		return x.SwitchReference
	}
	return nil
}

func (x *ChaosBackgroundTrafficFlowEntryPoint) GetFrontPanelPort() *ChaosBackgroundTrafficFlowEntryPointFrontPanelPort {
	if x != nil {
		return x.FrontPanelPort
	}
	return nil
}

type ChaosBackgroundTrafficFlowEntryPointSwitchReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice *ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum       `protobuf:"varint,1,opt,name=choice,proto3,enum=onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum,oneof" json:"choice,omitempty"`
	Spine  *ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine              `protobuf:"bytes,2,opt,name=spine,proto3,oneof" json:"spine,omitempty"`
	Pod    *ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference `protobuf:"bytes,3,opt,name=pod,proto3,oneof" json:"pod,omitempty"`
	Tor    *ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference `protobuf:"bytes,4,opt,name=tor,proto3,oneof" json:"tor,omitempty"`
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference) Reset() {
	*x = ChaosBackgroundTrafficFlowEntryPointSwitchReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowEntryPointSwitchReference) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowEntryPointSwitchReference.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowEntryPointSwitchReference) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{52}
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference) GetChoice() ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_unspecified
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference) GetSpine() *ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine {
	if x != nil {
		return x.Spine
	}
	return nil
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference) GetPod() *ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference) GetTor() *ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference {
	if x != nil {
		return x.Tor
	}
	return nil
}

type ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchIndex *int32 `protobuf:"varint,1,opt,name=switch_index,json=switchIndex,proto3,oneof" json:"switch_index,omitempty"`
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine) Reset() {
	*x = ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{53}
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine) GetSwitchIndex() int32 {
	if x != nil && x.SwitchIndex != nil {
		return *x.SwitchIndex
	}
	return 0
}

type ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodIndex    *int32 `protobuf:"varint,1,opt,name=pod_index,json=podIndex,proto3,oneof" json:"pod_index,omitempty"`
	SwitchIndex *int32 `protobuf:"varint,2,opt,name=switch_index,json=switchIndex,proto3,oneof" json:"switch_index,omitempty"`
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference) Reset() {
	*x = ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{54}
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference) GetPodIndex() int32 {
	if x != nil && x.PodIndex != nil {
		return *x.PodIndex
	}
	return 0
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference) GetSwitchIndex() int32 {
	if x != nil && x.SwitchIndex != nil {
		return *x.SwitchIndex
	}
	return 0
}

type ChaosBackgroundTrafficFlowEntryPointFrontPanelPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontPanelPort *int32 `protobuf:"varint,1,opt,name=front_panel_port,json=frontPanelPort,proto3,oneof" json:"front_panel_port,omitempty"`
}

func (x *ChaosBackgroundTrafficFlowEntryPointFrontPanelPort) Reset() {
	*x = ChaosBackgroundTrafficFlowEntryPointFrontPanelPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowEntryPointFrontPanelPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowEntryPointFrontPanelPort) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowEntryPointFrontPanelPort) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowEntryPointFrontPanelPort.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowEntryPointFrontPanelPort) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{55}
}

func (x *ChaosBackgroundTrafficFlowEntryPointFrontPanelPort) GetFrontPanelPort() int32 {
	if x != nil && x.FrontPanelPort != nil {
		return *x.FrontPanelPort
	}
	return 0
}

type ChaosBackgroundTrafficFlowStateless struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string                                            `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Rate     *int32                                             `protobuf:"varint,2,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	RateUnit *ChaosBackgroundTrafficFlowStateless_RateUnit_Enum `protobuf:"varint,3,opt,name=rate_unit,json=rateUnit,proto3,enum=onexdatamodel.ChaosBackgroundTrafficFlowStateless_RateUnit_Enum,oneof" json:"rate_unit,omitempty"`
	Packet   *ChaosBackgroundTrafficFlowStatelessPacket         `protobuf:"bytes,4,opt,name=packet,proto3,oneof" json:"packet,omitempty"`
}

func (x *ChaosBackgroundTrafficFlowStateless) Reset() {
	*x = ChaosBackgroundTrafficFlowStateless{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowStateless) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowStateless) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowStateless) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowStateless.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowStateless) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{56}
}

func (x *ChaosBackgroundTrafficFlowStateless) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChaosBackgroundTrafficFlowStateless) GetRate() int32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *ChaosBackgroundTrafficFlowStateless) GetRateUnit() ChaosBackgroundTrafficFlowStateless_RateUnit_Enum {
	if x != nil && x.RateUnit != nil {
		return *x.RateUnit
	}
	return ChaosBackgroundTrafficFlowStateless_RateUnit_unspecified
}

func (x *ChaosBackgroundTrafficFlowStateless) GetPacket() *ChaosBackgroundTrafficFlowStatelessPacket {
	if x != nil {
		return x.Packet
	}
	return nil
}

type ChaosBackgroundTrafficFlowStatelessPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcAddress *string                                                    `protobuf:"bytes,1,opt,name=src_address,json=srcAddress,proto3,oneof" json:"src_address,omitempty"`
	DstAddress *string                                                    `protobuf:"bytes,2,opt,name=dst_address,json=dstAddress,proto3,oneof" json:"dst_address,omitempty"`
	SrcPort    *int32                                                     `protobuf:"varint,3,opt,name=src_port,json=srcPort,proto3,oneof" json:"src_port,omitempty"`
	DstPort    *int32                                                     `protobuf:"varint,4,opt,name=dst_port,json=dstPort,proto3,oneof" json:"dst_port,omitempty"`
	Size       *int32                                                     `protobuf:"varint,5,opt,name=size,proto3,oneof" json:"size,omitempty"`
	L4Protocol *ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum `protobuf:"varint,6,opt,name=l4_protocol,json=l4Protocol,proto3,enum=onexdatamodel.ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum,oneof" json:"l4_protocol,omitempty"`
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket) Reset() {
	*x = ChaosBackgroundTrafficFlowStatelessPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowStatelessPacket) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowStatelessPacket) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowStatelessPacket.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowStatelessPacket) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{57}
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket) GetSrcAddress() string {
	if x != nil && x.SrcAddress != nil {
		return *x.SrcAddress
	}
	return ""
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket) GetDstAddress() string {
	if x != nil && x.DstAddress != nil {
		return *x.DstAddress
	}
	return ""
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket) GetSrcPort() int32 {
	if x != nil && x.SrcPort != nil {
		return *x.SrcPort
	}
	return 0
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket) GetDstPort() int32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket) GetL4Protocol() ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum {
	if x != nil && x.L4Protocol != nil {
		return *x.L4Protocol
	}
	return ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_unspecified
}

type SetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{58}
}

func (x *SetConfigRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigRequest *ConfigRequest `protobuf:"bytes,1,opt,name=config_request,json=configRequest,proto3" json:"config_request,omitempty"`
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{59}
}

func (x *GetConfigRequest) GetConfigRequest() *ConfigRequest {
	if x != nil {
		return x.ConfigRequest
	}
	return nil
}

type SetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_400 *ErrorDetails   `protobuf:"bytes,1,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ErrorDetails   `protobuf:"bytes,2,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
	StatusCode_200 *WarningDetails `protobuf:"bytes,3,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
}

func (x *SetConfigResponse) Reset() {
	*x = SetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse) ProtoMessage() {}

func (x *SetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse.ProtoReflect.Descriptor instead.
func (*SetConfigResponse) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{60}
}

func (x *SetConfigResponse) GetStatusCode_400() *ErrorDetails {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetConfigResponse) GetStatusCode_500() *ErrorDetails {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

func (x *SetConfigResponse) GetStatusCode_200() *WarningDetails {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *ConfigResponse `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ErrorDetails   `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ErrorDetails   `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{61}
}

func (x *GetConfigResponse) GetStatusCode_200() *ConfigResponse {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *GetConfigResponse) GetStatusCode_400() *ErrorDetails {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *GetConfigResponse) GetStatusCode_500() *ErrorDetails {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type RunExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentRequest *ExperimentRequest `protobuf:"bytes,1,opt,name=experiment_request,json=experimentRequest,proto3" json:"experiment_request,omitempty"`
}

func (x *RunExperimentRequest) Reset() {
	*x = RunExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunExperimentRequest) ProtoMessage() {}

func (x *RunExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunExperimentRequest.ProtoReflect.Descriptor instead.
func (*RunExperimentRequest) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{62}
}

func (x *RunExperimentRequest) GetExperimentRequest() *ExperimentRequest {
	if x != nil {
		return x.ExperimentRequest
	}
	return nil
}

type RunExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_400 *ErrorDetails   `protobuf:"bytes,1,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ErrorDetails   `protobuf:"bytes,2,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
	StatusCode_200 *WarningDetails `protobuf:"bytes,3,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
}

func (x *RunExperimentResponse) Reset() {
	*x = RunExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunExperimentResponse) ProtoMessage() {}

func (x *RunExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunExperimentResponse.ProtoReflect.Descriptor instead.
func (*RunExperimentResponse) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{63}
}

func (x *RunExperimentResponse) GetStatusCode_400() *ErrorDetails {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *RunExperimentResponse) GetStatusCode_500() *ErrorDetails {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

func (x *RunExperimentResponse) GetStatusCode_200() *WarningDetails {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

type GetMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsRequest *MetricsRequest `protobuf:"bytes,1,opt,name=metrics_request,json=metricsRequest,proto3" json:"metrics_request,omitempty"`
}

func (x *GetMetricsRequest) Reset() {
	*x = GetMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsRequest) ProtoMessage() {}

func (x *GetMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{64}
}

func (x *GetMetricsRequest) GetMetricsRequest() *MetricsRequest {
	if x != nil {
		return x.MetricsRequest
	}
	return nil
}

type GetMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *MetricsResponse `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ErrorDetails    `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ErrorDetails    `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *GetMetricsResponse) Reset() {
	*x = GetMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsResponse) ProtoMessage() {}

func (x *GetMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetMetricsResponse) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{65}
}

func (x *GetMetricsResponse) GetStatusCode_200() *MetricsResponse {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *GetMetricsResponse) GetStatusCode_400() *ErrorDetails {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *GetMetricsResponse) GetStatusCode_500() *ErrorDetails {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type Fabric_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Fabric_Choice) Reset() {
	*x = Fabric_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fabric_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fabric_Choice) ProtoMessage() {}

func (x *Fabric_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fabric_Choice.ProtoReflect.Descriptor instead.
func (*Fabric_Choice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{16, 0}
}

type FabricSpine_DownlinkEcmpMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FabricSpine_DownlinkEcmpMode) Reset() {
	*x = FabricSpine_DownlinkEcmpMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricSpine_DownlinkEcmpMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricSpine_DownlinkEcmpMode) ProtoMessage() {}

func (x *FabricSpine_DownlinkEcmpMode) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricSpine_DownlinkEcmpMode.ProtoReflect.Descriptor instead.
func (*FabricSpine_DownlinkEcmpMode) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{18, 0}
}

type FabricPodSwitch_UplinkEcmpMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FabricPodSwitch_UplinkEcmpMode) Reset() {
	*x = FabricPodSwitch_UplinkEcmpMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricPodSwitch_UplinkEcmpMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricPodSwitch_UplinkEcmpMode) ProtoMessage() {}

func (x *FabricPodSwitch_UplinkEcmpMode) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricPodSwitch_UplinkEcmpMode.ProtoReflect.Descriptor instead.
func (*FabricPodSwitch_UplinkEcmpMode) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{21, 0}
}

type FabricPodSwitch_DownlinkEcmpMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FabricPodSwitch_DownlinkEcmpMode) Reset() {
	*x = FabricPodSwitch_DownlinkEcmpMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricPodSwitch_DownlinkEcmpMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricPodSwitch_DownlinkEcmpMode) ProtoMessage() {}

func (x *FabricPodSwitch_DownlinkEcmpMode) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricPodSwitch_DownlinkEcmpMode.ProtoReflect.Descriptor instead.
func (*FabricPodSwitch_DownlinkEcmpMode) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{21, 1}
}

type FabricRackProfile_TorUplinkEcmpMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FabricRackProfile_TorUplinkEcmpMode) Reset() {
	*x = FabricRackProfile_TorUplinkEcmpMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricRackProfile_TorUplinkEcmpMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricRackProfile_TorUplinkEcmpMode) ProtoMessage() {}

func (x *FabricRackProfile_TorUplinkEcmpMode) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricRackProfile_TorUplinkEcmpMode.ProtoReflect.Descriptor instead.
func (*FabricRackProfile_TorUplinkEcmpMode) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{23, 0}
}

type FabricRackProfile_TorDownlinkEcmpMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FabricRackProfile_TorDownlinkEcmpMode) Reset() {
	*x = FabricRackProfile_TorDownlinkEcmpMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricRackProfile_TorDownlinkEcmpMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricRackProfile_TorDownlinkEcmpMode) ProtoMessage() {}

func (x *FabricRackProfile_TorDownlinkEcmpMode) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricRackProfile_TorDownlinkEcmpMode.ProtoReflect.Descriptor instead.
func (*FabricRackProfile_TorDownlinkEcmpMode) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{23, 1}
}

type FabricQosProfileScheduler_SchedulerMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FabricQosProfileScheduler_SchedulerMode) Reset() {
	*x = FabricQosProfileScheduler_SchedulerMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricQosProfileScheduler_SchedulerMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricQosProfileScheduler_SchedulerMode) ProtoMessage() {}

func (x *FabricQosProfileScheduler_SchedulerMode) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricQosProfileScheduler_SchedulerMode.ProtoReflect.Descriptor instead.
func (*FabricQosProfileScheduler_SchedulerMode) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{26, 0}
}

type SwitchHostLink_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SwitchHostLink_Choice) Reset() {
	*x = SwitchHostLink_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchHostLink_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchHostLink_Choice) ProtoMessage() {}

func (x *SwitchHostLink_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchHostLink_Choice.ProtoReflect.Descriptor instead.
func (*SwitchHostLink_Choice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{29, 0}
}

type DataflowFlowProfile_L2ProtocolChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowFlowProfile_L2ProtocolChoice) Reset() {
	*x = DataflowFlowProfile_L2ProtocolChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfile_L2ProtocolChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfile_L2ProtocolChoice) ProtoMessage() {}

func (x *DataflowFlowProfile_L2ProtocolChoice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfile_L2ProtocolChoice.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfile_L2ProtocolChoice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{32, 0}
}

type DataflowFlowProfile_L4ProtocolChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowFlowProfile_L4ProtocolChoice) Reset() {
	*x = DataflowFlowProfile_L4ProtocolChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfile_L4ProtocolChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfile_L4ProtocolChoice) ProtoMessage() {}

func (x *DataflowFlowProfile_L4ProtocolChoice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfile_L4ProtocolChoice.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfile_L4ProtocolChoice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{32, 1}
}

type DataflowFlowProfileTcp_CongestionAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowFlowProfileTcp_CongestionAlgorithm) Reset() {
	*x = DataflowFlowProfileTcp_CongestionAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowFlowProfileTcp_CongestionAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowFlowProfileTcp_CongestionAlgorithm) ProtoMessage() {}

func (x *DataflowFlowProfileTcp_CongestionAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowFlowProfileTcp_CongestionAlgorithm.ProtoReflect.Descriptor instead.
func (*DataflowFlowProfileTcp_CongestionAlgorithm) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{34, 0}
}

type L4PortRange_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *L4PortRange_Choice) Reset() {
	*x = L4PortRange_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L4PortRange_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L4PortRange_Choice) ProtoMessage() {}

func (x *L4PortRange_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L4PortRange_Choice.ProtoReflect.Descriptor instead.
func (*L4PortRange_Choice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{35, 0}
}

type DataflowWorkloadItem_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowWorkloadItem_Choice) Reset() {
	*x = DataflowWorkloadItem_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowWorkloadItem_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowWorkloadItem_Choice) ProtoMessage() {}

func (x *DataflowWorkloadItem_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowWorkloadItem_Choice.ProtoReflect.Descriptor instead.
func (*DataflowWorkloadItem_Choice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{39, 0}
}

type DataflowAllReduceWorkload_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowAllReduceWorkload_Type) Reset() {
	*x = DataflowAllReduceWorkload_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowAllReduceWorkload_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowAllReduceWorkload_Type) ProtoMessage() {}

func (x *DataflowAllReduceWorkload_Type) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowAllReduceWorkload_Type.ProtoReflect.Descriptor instead.
func (*DataflowAllReduceWorkload_Type) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{43, 0}
}

type DataflowComputeWorkload_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataflowComputeWorkload_Choice) Reset() {
	*x = DataflowComputeWorkload_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataflowComputeWorkload_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataflowComputeWorkload_Choice) ProtoMessage() {}

func (x *DataflowComputeWorkload_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataflowComputeWorkload_Choice.ProtoReflect.Descriptor instead.
func (*DataflowComputeWorkload_Choice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{44, 0}
}

type ChaosBackgroundTrafficFlow_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChaosBackgroundTrafficFlow_Choice) Reset() {
	*x = ChaosBackgroundTrafficFlow_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlow_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlow_Choice) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlow_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlow_Choice.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlow_Choice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{50, 0}
}

type ChaosBackgroundTrafficFlowEntryPoint_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChaosBackgroundTrafficFlowEntryPoint_Choice) Reset() {
	*x = ChaosBackgroundTrafficFlowEntryPoint_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowEntryPoint_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowEntryPoint_Choice) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowEntryPoint_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowEntryPoint_Choice.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowEntryPoint_Choice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{51, 0}
}

type ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice) Reset() {
	*x = ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{52, 0}
}

type ChaosBackgroundTrafficFlowStateless_RateUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChaosBackgroundTrafficFlowStateless_RateUnit) Reset() {
	*x = ChaosBackgroundTrafficFlowStateless_RateUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowStateless_RateUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowStateless_RateUnit) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowStateless_RateUnit) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowStateless_RateUnit.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowStateless_RateUnit) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{56, 0}
}

type ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol) Reset() {
	*x = ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_onexdatamodel_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol) ProtoMessage() {}

func (x *ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_onexdatamodel_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol.ProtoReflect.Descriptor instead.
func (*ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol) Descriptor() ([]byte, []int) {
	return file_onexdatamodel_proto_rawDescGZIP(), []int{57, 0}
}

var file_onexdatamodel_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*OpenApiMsgOpt)(nil),
		Field:         60001,
		Name:          "onexdatamodel.msg_meta",
		Tag:           "bytes,60001,opt,name=msg_meta",
		Filename:      "onexdatamodel.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*OpenApiFldOpt)(nil),
		Field:         60002,
		Name:          "onexdatamodel.fld_meta",
		Tag:           "bytes,60002,opt,name=fld_meta",
		Filename:      "onexdatamodel.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*OpenApiSvcOpt)(nil),
		Field:         60003,
		Name:          "onexdatamodel.svc_meta",
		Tag:           "bytes,60003,opt,name=svc_meta",
		Filename:      "onexdatamodel.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*OpenApiRpcOpt)(nil),
		Field:         60004,
		Name:          "onexdatamodel.rpc_meta",
		Tag:           "bytes,60004,opt,name=rpc_meta",
		Filename:      "onexdatamodel.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional onexdatamodel.OpenApiMsgOpt msg_meta = 60001;
	E_MsgMeta = &file_onexdatamodel_proto_extTypes[0]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional onexdatamodel.OpenApiFldOpt fld_meta = 60002;
	E_FldMeta = &file_onexdatamodel_proto_extTypes[1]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional onexdatamodel.OpenApiSvcOpt svc_meta = 60003;
	E_SvcMeta = &file_onexdatamodel_proto_extTypes[2]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional onexdatamodel.OpenApiRpcOpt rpc_meta = 60004;
	E_RpcMeta = &file_onexdatamodel_proto_extTypes[3]
)

var File_onexdatamodel_proto protoreflect.FileDescriptor

var file_onexdatamodel_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x4d, 0x73,
	0x67, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70,
	0x69, 0x46, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x53, 0x76,
	0x63, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70,
	0x69, 0x52, 0x70, 0x63, 0x4f, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0xa6, 0x1d, 0x22, 0xa2, 0x01, 0x1f, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x71,
	0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24,
	0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x3a, 0x23, 0x8a, 0xa6,
	0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x22, 0x77, 0x0a, 0x0e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x30, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x1f, 0x8a, 0xa6, 0x1d,
	0x1b, 0x52, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x97, 0x01, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x20, 0x8a, 0xa6, 0x1d, 0x1c, 0x52,
	0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x35, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a, 0x20, 0x8a, 0xa6, 0x1d,
	0x1c, 0x52, 0x1a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2f, 0x0a,
	0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x3a,
	0x1d, 0x8a, 0xa6, 0x1d, 0x19, 0x52, 0x17, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xdf,
	0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x6a, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x1a, 0x92, 0xa6, 0x1d, 0x16, 0xa2, 0x01, 0x13, 0x6a, 0x6f, 0x62, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6a,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x6e,
	0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x0b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x1e, 0x8a, 0xa6, 0x1d, 0x1a, 0x52, 0x18,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x63, 0x74,
	0x22, 0x80, 0x05, 0x0a, 0x19, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e,
	0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d,
	0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0c, 0x74,
	0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x48, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x03, 0x66, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1b, 0x92, 0xa6, 0x1d, 0x17, 0xa2, 0x01, 0x14, 0x66, 0x6c,
	0x6f, 0x77, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x48, 0x04, 0x52, 0x03, 0x66, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x08,
	0x74, 0x63, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x05, 0x52, 0x07, 0x74, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x66, 0x63, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x98, 0x03, 0x0a, 0x20, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x54, 0x63, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x26, 0x92, 0xa6, 0x1d, 0x22, 0xa2, 0x01, 0x1f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x69, 0x70, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52,
	0x03, 0x72, 0x74, 0x74, 0x88, 0x01, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x72, 0x74, 0x74, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x5f,
	0x92, 0xa6, 0x1d, 0x5b, 0xa2, 0x01, 0x58, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x69,
	0x70, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2c,
	0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x01, 0x52, 0x0b, 0x72, 0x74, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x59, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x2a, 0x92, 0xa6, 0x1d, 0x26,
	0xa2, 0x01, 0x23, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x54, 0x43, 0x50, 0x20, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6,
	0x1d, 0x1f, 0x52, 0x1d, 0x54, 0x43, 0x50, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x6c, 0x6f,
	0x77, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x74, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x74,
	0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc5,
	0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x05, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x42, 0x24, 0x92,
	0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x06, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x37, 0x8a, 0xa6, 0x1d,
	0x33, 0x52, 0x31, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x20, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92,
	0xa6, 0x1d, 0x2a, 0xa2, 0x01, 0x27, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x92, 0xa6, 0x1d, 0x1f, 0xa2, 0x01, 0x1c, 0x54, 0x68, 0x65,
	0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x25, 0x92, 0xa6, 0x1d, 0x04, 0x52, 0x02, 0x32, 0x34, 0x92, 0xa6, 0x1d, 0x19,
	0xa2, 0x01, 0x16, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xd4, 0x03, 0x0a, 0x06, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x12, 0x64, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x72, 0x0a, 0x0e, 0x73, 0x70, 0x69, 0x6e, 0x65,
	0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x64, 0x52, 0x61,
	0x63, 0x6b, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x69, 0x6e,
	0x65, 0x50, 0x6f, 0x64, 0x52, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x0c, 0x71,
	0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x32, 0x92, 0xa6, 0x1d, 0x2e, 0xa2, 0x01, 0x2b, 0x41, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x28, 0x51, 0x6f, 0x53, 0x29, 0x20, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x71, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x1a, 0x35, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2b, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x5f,
	0x70, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f,
	0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x70, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x9b, 0x04,
	0x0a, 0x12, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x64,
	0x52, 0x61, 0x63, 0x6b, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x53, 0x70, 0x69, 0x6e, 0x65,
	0x42, 0x22, 0x92, 0xa6, 0x1d, 0x1e, 0xa2, 0x01, 0x1b, 0x54, 0x68, 0x65, 0x20, 0x73, 0x70, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x52, 0x06, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x04,
	0x70, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x50, 0x6f, 0x64, 0x42, 0x20, 0x92, 0xa6, 0x1d, 0x1c, 0xa2, 0x01, 0x19, 0x54, 0x68, 0x65,
	0x20, 0x70, 0x6f, 0x64, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x0a,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x61, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x1d, 0x92, 0xa6, 0x1d, 0x19, 0xa2, 0x01, 0x16,
	0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6f, 0x64, 0x20, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0d, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x52, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x1e, 0x92, 0xa6,
	0x1d, 0x1a, 0xa2, 0x01, 0x17, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72,
	0x61, 0x63, 0x6b, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x72, 0x61,
	0x63, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x2f, 0x8a, 0xa6, 0x1d, 0x2b,
	0x52, 0x29, 0x41, 0x6e, 0x20, 0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x6f, 0x64, 0x2f, 0x72, 0x61,
	0x63, 0x6b, 0x20, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x22, 0x8f, 0x07, 0x0a, 0x0b,
	0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x85, 0x01, 0x92, 0xa6,
	0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x7a, 0xa2, 0x01, 0x77, 0x54, 0x68, 0x65, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x20, 0x73,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x0a,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0xf3, 0x02, 0x0a, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x8d,
	0x02, 0x92, 0xa6, 0x1d, 0x88, 0x02, 0xa2, 0x01, 0x84, 0x02, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x76, 0x65, 0x72, 0x20, 0x45, 0x43, 0x4d, 0x50, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e,
	0x0a, 0x2d, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x20,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x20, 0x70, 0x75, 0x74, 0x73, 0x20, 0x65, 0x61,
	0x63, 0x68, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20,
	0x45, 0x43, 0x4d, 0x50, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x20, 0x0a, 0x2d, 0x20, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x33, 0x5f, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x33, 0x20, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x20, 0x68,
	0x61, 0x73, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x70, 0x76, 0x34, 0x20, 0x73, 0x72, 0x63, 0x2c,
	0x20, 0x64, 0x73, 0x74, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x0a, 0x2d,
	0x20, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x35, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6c, 0x34, 0x20, 0x62, 0x75, 0x74, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x52,
	0x54, 0x41, 0x47, 0x37, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x48, 0x01,
	0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x78, 0x92, 0xa6, 0x1d, 0x74, 0xa2, 0x01, 0x71, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x71, 0x6f, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x78, 0x2d, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x3a, 0x0a, 0x2d, 0x20, 0x23, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x51,
	0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x48, 0x02, 0x52, 0x0e, 0x71, 0x6f,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a,
	0x61, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x33, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x35, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x10, 0x03, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65,
	0x63, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf4, 0x01,
	0x0a, 0x09, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x64, 0x12, 0x5c, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0xa6, 0x1d, 0x03,
	0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x36, 0xa2, 0x01, 0x33, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6f, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x10, 0x70, 0x6f, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x30, 0x92, 0xa6, 0x1d, 0x2c, 0xa2, 0x01, 0x29, 0x54, 0x68, 0x65, 0x20,
	0x70, 0x6f, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x70, 0x6f, 0x64, 0x2e, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x10, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x50,
	0x6f, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x50, 0x6f, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x24, 0x92, 0xa6,
	0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x01, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x58, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x52, 0x61, 0x63, 0x6b, 0x42, 0x24, 0x92, 0xa6, 0x1d,
	0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x48, 0x02, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6,
	0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70,
	0x6f, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61,
	0x63, 0x6b, 0x22, 0xce, 0x0b, 0x0a, 0x0f, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x64,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2b, 0x92, 0xa6, 0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6,
	0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x79,
	0x0a, 0x1d, 0x70, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x92, 0xa6, 0x1d, 0x2d, 0xa2, 0x01, 0x2a, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x64, 0x20,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x48, 0x01, 0x52, 0x1a, 0x70, 0x6f, 0x64, 0x54,
	0x6f, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0xf1, 0x02, 0x0a, 0x10, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x64, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x8d, 0x02, 0x92, 0xa6, 0x1d, 0x88, 0x02,
	0xa2, 0x01, 0x84, 0x02, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x45,
	0x43, 0x4d, 0x50, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x0a, 0x2d, 0x20, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x6c, 0x79, 0x20, 0x70, 0x75, 0x74, 0x73, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x45, 0x43, 0x4d, 0x50, 0x20, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x0a, 0x2d, 0x20, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x33, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x20, 0x33, 0x20, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x6f, 0x66,
	0x20, 0x69, 0x70, 0x76, 0x34, 0x20, 0x73, 0x72, 0x63, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x2c, 0x20,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x0a, 0x2d, 0x20, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x35, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x34, 0x20, 0x62,
	0x75, 0x74, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x54, 0x41, 0x47, 0x37, 0x20, 0x68,
	0x61, 0x73, 0x68, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0xf7, 0x02,
	0x0a, 0x12, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x50, 0x6f, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x42, 0x8d, 0x02, 0x92, 0xa6, 0x1d, 0x88, 0x02, 0xa2, 0x01, 0x84, 0x02, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x45, 0x43, 0x4d, 0x50, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x2e, 0x0a, 0x2d, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x72, 0x61,
	0x79, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x20, 0x70, 0x75, 0x74, 0x73, 0x20,
	0x65, 0x61, 0x63, 0x68, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61,
	0x6e, 0x20, 0x45, 0x43, 0x4d, 0x50, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x20, 0x0a, 0x2d, 0x20, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x33, 0x5f, 0x74, 0x75,
	0x70, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x33, 0x20, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x70, 0x76, 0x34, 0x20, 0x73, 0x72,
	0x63, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x0a, 0x2d, 0x20, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x35, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6c, 0x34, 0x20, 0x62, 0x75, 0x74, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x52, 0x54, 0x41, 0x47, 0x37, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x48, 0x03, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0xb3, 0x01, 0x0a, 0x10, 0x71, 0x6f, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x83, 0x01, 0x92, 0xa6, 0x1d, 0x7f, 0xa2, 0x01, 0x7c, 0x54, 0x68, 0x65, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x71, 0x6f, 0x73, 0x20, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x6f, 0x64, 0x20, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x0a, 0x0a, 0x78, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x3a, 0x0a, 0x2d, 0x20, 0x23, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x51, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x48, 0x04, 0x52, 0x0e, 0x71, 0x6f, 0x73, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x5f, 0x0a,
	0x0e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x4d, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x33, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x35, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x10, 0x03, 0x1a, 0x61,
	0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x4d, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x33, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x35, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x10,
	0x03, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x69, 0x6e,
	0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x63,
	0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0a, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x52, 0x61,
	0x63, 0x6b, 0x12, 0x53, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x38, 0x92, 0xa6, 0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x2d, 0xa2, 0x01,
	0x2a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x20, 0x28, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x75, 0x73, 0x20, 0x54, 0x6f, 0x52, 0x73, 0x29,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x12, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x3c, 0x92, 0xa6, 0x1d, 0x38, 0xa2, 0x01, 0x35, 0x54, 0x68, 0x65, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x61, 0x63, 0x6b,
	0x2e, 0x52, 0x10, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xf9, 0x0b, 0x0a, 0x11, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x52, 0x61, 0x63,
	0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0xfd, 0x02, 0x0a, 0x14, 0x74, 0x6f, 0x72, 0x5f,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x52, 0x61, 0x63,
	0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x6f, 0x72, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42,
	0x8d, 0x02, 0x92, 0xa6, 0x1d, 0x88, 0x02, 0xa2, 0x01, 0x84, 0x02, 0x54, 0x68, 0x65, 0x20, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x45, 0x43, 0x4d, 0x50, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x2e, 0x0a, 0x2d, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79,
	0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x20, 0x70, 0x75, 0x74, 0x73, 0x20, 0x65,
	0x61, 0x63, 0x68, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e,
	0x20, 0x45, 0x43, 0x4d, 0x50, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x20, 0x0a, 0x2d, 0x20, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x33, 0x5f, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x33, 0x20, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x20,
	0x68, 0x61, 0x73, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x70, 0x76, 0x34, 0x20, 0x73, 0x72, 0x63,
	0x2c, 0x20, 0x64, 0x73, 0x74, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x0a,
	0x2d, 0x20, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x35, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x20, 0x69,
	0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6c, 0x34, 0x20, 0x62, 0x75, 0x74, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x52, 0x54, 0x41, 0x47, 0x37, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x48,
	0x01, 0x52, 0x11, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x83, 0x03, 0x0a, 0x16, 0x74, 0x6f, 0x72, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x52,
	0x61, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x54, 0x6f, 0x72, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x42, 0x8d, 0x02, 0x92, 0xa6, 0x1d, 0x88, 0x02, 0xa2, 0x01, 0x84, 0x02, 0x54,
	0x68, 0x65, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x45, 0x43, 0x4d, 0x50, 0x20, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x0a, 0x2d, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73,
	0x70, 0x72, 0x61, 0x79, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x20, 0x70, 0x75,
	0x74, 0x73, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x6f,
	0x6e, 0x20, 0x61, 0x6e, 0x20, 0x45, 0x43, 0x4d, 0x50, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x0a, 0x2d, 0x20, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x33,
	0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x33, 0x20, 0x74, 0x75,
	0x70, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x70, 0x76, 0x34,
	0x20, 0x73, 0x72, 0x63, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x0a, 0x2d, 0x20, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x35, 0x5f, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x34, 0x20, 0x62, 0x75, 0x74, 0x20, 0x61, 0x20,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x52, 0x54, 0x41, 0x47, 0x37, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x48, 0x02, 0x52, 0x13, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0xc0, 0x01,
	0x0a, 0x14, 0x74, 0x6f, 0x72, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x89, 0x01, 0x92,
	0xa6, 0x1d, 0x84, 0x01, 0xa2, 0x01, 0x80, 0x01, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x71, 0x6f, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x6f, 0x52, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x72, 0x61, 0x63, 0x6b, 0x0a, 0x0a, 0x78, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x3a, 0x0a, 0x2d, 0x20, 0x23, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x51, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x48, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x72, 0x51,
	0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x77, 0x0a, 0x1b, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0xa6, 0x1d, 0x2f, 0xa2, 0x01, 0x2c, 0x54, 0x68,
	0x65, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x54, 0x6f, 0x52, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x04, 0x52, 0x18, 0x74, 0x6f,
	0x72, 0x54, 0x6f, 0x50, 0x6f, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x62, 0x0a, 0x11, 0x54, 0x6f, 0x72,
	0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x4d,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x33, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x35, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x10, 0x03, 0x1a, 0x64, 0x0a,
	0x13, 0x54, 0x6f, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x63, 0x6d, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x4d, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x70, 0x72, 0x61, 0x79, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x33, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x35, 0x5f, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x10, 0x03, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74,
	0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x63, 0x6d, 0x70,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x72, 0x5f, 0x71, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2,
	0x04, 0x0a, 0x10, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x6e, 0x65, 0x78,
	0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x09, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x15, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x89, 0x03, 0x0a, 0x20, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x6f,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x5d, 0x92, 0xa6, 0x1d, 0x03, 0x52, 0x01,
	0x30, 0x92, 0xa6, 0x1d, 0x52, 0xa2, 0x01, 0x4f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x29, 0x20,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63,
	0x68, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x51, 0x6f, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x75, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x40,
	0x92, 0xa6, 0x1d, 0x03, 0x52, 0x01, 0x30, 0x92, 0xa6, 0x1d, 0x35, 0xa2, 0x01, 0x32, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x20, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x28, 0x69, 0x6e, 0x20,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x29, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x01, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x80, 0x03, 0x0a, 0x19, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x90, 0x01,
	0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x42, 0x27, 0x92, 0xa6, 0x1d, 0x23, 0xa2, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x20, 0x64, 0x69, 0x73, 0x63, 0x69, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x1e, 0x92, 0xa6, 0x1d, 0x1a, 0xa2, 0x01, 0x17, 0x41, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x57, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x46, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x10, 0x02, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f,
	0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0xc6, 0x03, 0x0a, 0x24, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9b, 0x01, 0x0a, 0x19,
	0x6d, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x15, 0x6d, 0x61, 0x70, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x9d, 0x01, 0x0a, 0x1a, 0x6d, 0x61,
	0x70, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x16,
	0x6d, 0x61, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x54,
	0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x1c,
	0x0a, 0x1a, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x1d, 0x0a, 0x1b,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x27, 0x46,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xaf, 0x07, 0x0a, 0x0e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x62,
	0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x45, 0x92, 0xa6, 0x1d, 0x41, 0xa2, 0x01, 0x3e, 0x54, 0x42, 0x44, 0x0a, 0x0a, 0x78,
	0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x3a, 0x0a, 0x2d, 0x20, 0x23,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x2f, 0x48, 0x6f, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x7d, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x4e, 0x92, 0xa6,
	0x1d, 0x4a, 0xa2, 0x01, 0x47, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x62, 0x6f, 0x78, 0x48, 0x00, 0x52, 0x0e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x3a, 0x92,
	0xa6, 0x1d, 0x12, 0x52, 0x10, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x72, 0x61, 0x63, 0x6b, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x8f, 0x01, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x74, 0x92, 0xa6, 0x1d, 0x70, 0xa2, 0x01, 0x6d, 0x4f,
	0x6e, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x73,
	0x20, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x72, 0x61,
	0x63, 0x6b, 0x20, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x48, 0x02, 0x52, 0x05,
	0x73, 0x70, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x42, 0x24, 0x92,
	0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a,
	0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x6e,
	0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x66, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x04, 0x52, 0x04, 0x72, 0x61, 0x63,
	0x6b, 0x88, 0x01, 0x01, 0x1a, 0x3f, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x35,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x6e, 0x65,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x72,
	0x61, 0x63, 0x6b, 0x10, 0x03, 0x3a, 0x5b, 0x8a, 0xa6, 0x1d, 0x57, 0x52, 0x55, 0x54, 0x68, 0x65,
	0x20, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x6f, 0x66, 0x20, 0x61,
	0x20, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2c, 0x20, 0x0a,
	0x61, 0x20, 0x70, 0x6f, 0x64, 0x2f, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x70, 0x6f, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x22, 0xe0, 0x02,
	0x0a, 0x17, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x12, 0x74, 0x0a, 0x09, 0x70, 0x6f, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x52, 0x92, 0xa6,
	0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x47, 0xa2, 0x01, 0x44, 0x4f, 0x6e, 0x65, 0x2d,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x6f, 0x64, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x6f,
	0x64, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x74, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x4c, 0x92, 0xa6, 0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6,
	0x1d, 0x41, 0xa2, 0x01, 0x3e, 0x4f, 0x6e, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x64, 0x20,
	0x6f, 0x72, 0x20, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x70, 0x6f, 0x64, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x3a, 0x8a, 0xa6, 0x1d, 0x36, 0x52, 0x34, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x64,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x20, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xed, 0x02, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x74, 0x0a,
	0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x48,
	0x6f, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x24, 0x92,
	0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x30, 0x92, 0xa6, 0x1d, 0x2c,
	0xa2, 0x01, 0x29, 0x54, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x0a, 0x92, 0xa6, 0x1d, 0x06, 0xa2, 0x01, 0x03, 0x66, 0x6f, 0x6f, 0x52, 0x0c, 0x66,
	0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x23, 0x8a, 0xa6, 0x1d,
	0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x22, 0xd7, 0x07, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x6c, 0x32, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x20, 0x92, 0xa6,
	0x1d, 0x1c, 0xa2, 0x01, 0x19, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x20, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x10, 0x6c, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x08, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x6c, 0x34, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x34, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42,
	0x20, 0x92, 0xa6, 0x1d, 0x1c, 0xa2, 0x01, 0x19, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x20, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x02, 0x52, 0x10, 0x6c, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x42, 0x24, 0x92, 0xa6,
	0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x03, 0x52, 0x03, 0x74, 0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x03,
	0x75, 0x64, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x6e, 0x65, 0x78,
	0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x64, 0x70,
	0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x04, 0x52, 0x03, 0x75, 0x64, 0x70, 0x88, 0x01, 0x01,
	0x1a, 0x39, 0x0a, 0x10, 0x4c, 0x32, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x01, 0x1a, 0x3d, 0x0a, 0x10, 0x4c,
	0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x29, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x10, 0x02, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f,
	0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x32, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x34, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74,
	0x63, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x44,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2a, 0x92, 0xa6, 0x1d, 0x06, 0x52, 0x04, 0x31,
	0x35, 0x30, 0x30, 0x92, 0xa6, 0x1d, 0x1c, 0xa2, 0x01, 0x19, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x55,
	0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a,
	0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x74, 0x75, 0x22, 0xe0, 0x07, 0x0a, 0x16, 0x44,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x63, 0x70, 0x12, 0xd0, 0x02, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x63, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x42, 0xd8, 0x01, 0x92, 0xa6, 0x1d, 0x20, 0x52, 0x1e, 0x43, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x63, 0x75, 0x62, 0x69, 0x63, 0x92, 0xa6, 0x1d, 0xaf, 0x01, 0xa2,
	0x01, 0xab, 0x01, 0x54, 0x68, 0x65, 0x20, 0x54, 0x43, 0x50, 0x20, 0x63, 0x6f, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x3a,
	0x0a, 0x62, 0x62, 0x72, 0x20, 0x2d, 0x20, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63,
	0x6b, 0x20, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x74, 0x72, 0x69, 0x70, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0a, 0x64, 0x63, 0x74, 0x63,
	0x70, 0x20, 0x2d, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x20,
	0x54, 0x43, 0x50, 0x0a, 0x63, 0x75, 0x62, 0x69, 0x63, 0x20, 0x2d, 0x20, 0x63, 0x75, 0x62, 0x69,
	0x63, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x72, 0x65, 0x6e, 0x6f, 0x20,
	0x2d, 0x20, 0x54, 0x43, 0x50, 0x20, 0x4e, 0x65, 0x77, 0x20, 0x52, 0x65, 0x6e, 0x6f, 0x48, 0x00,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74,
	0x63, 0x77, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0x92, 0xa6, 0x1d, 0x1c,
	0xa2, 0x01, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x01, 0x52, 0x08,
	0x69, 0x6e, 0x69, 0x74, 0x63, 0x77, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0xa6,
	0x1d, 0x13, 0xa2, 0x01, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x20, 0x73, 0x69, 0x7a, 0x65, 0x48, 0x02, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x75, 0x66,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x62, 0x75,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x92, 0xa6, 0x1d, 0x16, 0xa2, 0x01, 0x13,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x73,
	0x69, 0x7a, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x62, 0x75,
	0x66, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x34,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x04, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x6e, 0x65, 0x78,
	0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x05, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x57, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x22, 0x40, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x62, 0x62, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x63, 0x74, 0x63, 0x70, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x63, 0x75, 0x62, 0x69, 0x63, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x72,
	0x65, 0x6e, 0x6f, 0x10, 0x04, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63,
	0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x63, 0x77, 0x6e, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x62, 0x75, 0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x62, 0x75, 0x66, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd5, 0x03,
	0x0a, 0x0b, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x50, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x34,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0b, 0x92, 0xa6, 0x1d, 0x07, 0xa2, 0x01, 0x04, 0x4e, 0x6f,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x73, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x24, 0x92, 0xa6,
	0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3e, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x34, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x02, 0x3a, 0x37, 0x8a, 0xa6, 0x1d, 0x33, 0x52, 0x31, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x34, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x4c, 0x34, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2b, 0x92, 0xa6, 0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x10, 0x4c, 0x34, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2b, 0x92, 0xa6, 0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x2b, 0x92, 0xa6, 0x1d, 0x03, 0x52, 0x01, 0x31, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x01, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x3a,
	0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x64, 0x70, 0x3a, 0x23, 0x8a, 0xa6,
	0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x22, 0xb2, 0x08, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0xa6, 0x1d, 0x28, 0xa2, 0x01,
	0x25, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x74, 0x65,
	0x6d, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x20, 0x92,
	0xa6, 0x1d, 0x1c, 0xa2, 0x01, 0x19, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x06, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x24, 0x92, 0xa6, 0x1d,
	0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x48, 0x01, 0x52, 0x06, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x62,
	0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x6f, 0x70, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x6b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x24, 0x92, 0xa6, 0x1d,
	0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x48, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x72, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x24, 0x92,
	0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x48, 0x04, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x05, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x70, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x66, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x63, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x6f, 0x6f, 0x70, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0x06, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x5a, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x40, 0x92, 0xa6, 0x1d, 0x3c, 0xa2, 0x01, 0x39, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x65,
	0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x41, 0x92, 0xa6, 0x1d, 0x3d, 0xa2, 0x01, 0x3a, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c,
	0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x92, 0xa6, 0x1d, 0x19, 0xa2, 0x01, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xe9, 0x02, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5a,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x40, 0x92, 0xa6, 0x1d, 0x3c, 0xa2, 0x01, 0x39, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x41, 0x92, 0xa6, 0x1d, 0x3d, 0xa2, 0x01, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0xa6,
	0x1d, 0x19, 0xa2, 0x01, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66,
	0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe6, 0x02, 0x0a,
	0x16, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5a, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x40, 0x92, 0xa6, 0x1d, 0x3c, 0xa2, 0x01,
	0x39, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x41, 0x92, 0xa6, 0x1d, 0x3d, 0xa2,
	0x01, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0xa6, 0x1d, 0x19, 0xa2, 0x01, 0x16, 0x66, 0x6c,
	0x6f, 0x77, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f,
	0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x03, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c,
	0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0xa6, 0x1d, 0x19,
	0xa2, 0x01, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x80, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x42, 0x33, 0x92, 0xa6, 0x1d, 0x16, 0x52, 0x14, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x2e, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x92, 0xa6,
	0x1d, 0x15, 0xa2, 0x01, 0x12, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c,
	0x6c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x62, 0x75, 0x74, 0x74, 0x65, 0x72, 0x66, 0x6c, 0x79, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x04, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f,
	0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa8,
	0x03, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x16, 0x92, 0xa6, 0x1d, 0x12,
	0xa2, 0x01, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x78, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x09, 0x73, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x30, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x26, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d,
	0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x20, 0x44, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5d,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x3c, 0x92, 0xa6, 0x1d, 0x38, 0xa2, 0x01, 0x35, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a,
	0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x97, 0x02, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x6f, 0x70,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0x92, 0xa6,
	0x1d, 0x23, 0xa2, 0x01, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x7d, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f,
	0x77, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x3c, 0x92,
	0xa6, 0x1d, 0x38, 0xa2, 0x01, 0x35, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xad, 0x03, 0x0a, 0x16, 0x44, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0xa6, 0x1d, 0x41, 0xa2, 0x01, 0x3e,
	0x54, 0x42, 0x44, 0x0a, 0x0a, 0x78, 0x2d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x3a, 0x0a, 0x2d, 0x20, 0x23, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x48, 0x6f, 0x73, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x57, 0x92, 0xa6, 0x1d, 0x53, 0xa2, 0x01, 0x50, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x11,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x61, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0xa6, 0x1d, 0x42, 0xa2, 0x01, 0x3f, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x63, 0x61, 0x72, 0x64, 0x20, 0x28, 0x6e, 0x69, 0x63, 0x29,
	0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x65, 0x74, 0x68, 0x31, 0x52, 0x07, 0x6e, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x43, 0x8a, 0xa6, 0x1d, 0x3f, 0x52, 0x3d, 0x61, 0x75, 0x78, 0x69,
	0x6c, 0x6c, 0x61, 0x72, 0x79, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x72, 0x75, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x05, 0x43, 0x68,
	0x61, 0x6f, 0x73, 0x12, 0x7f, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x11,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x22, 0xa4, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x65, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xde, 0x04, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6f,
	0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x8c, 0x01, 0x0a, 0x12, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52,
	0x10, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x78, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x24, 0x92, 0xa6, 0x1d,
	0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x48, 0x02, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x76,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x1a, 0x30, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x26, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x10, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x88, 0x05, 0x0a, 0x24, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x82, 0x01, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x96, 0x01, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x4d, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x43, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x86, 0x06, 0x0a, 0x33, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x24, 0x92, 0xa6,
	0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x88, 0x01, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01,
	0x52, 0x05, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x91, 0x01, 0x0a, 0x03, 0x70,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46,
	0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x24,
	0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x91,
	0x01, 0x0a, 0x03, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x6f, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x03, 0x74, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x1a, 0x3e, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x6f, 0x72,
	0x10, 0x03, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x70, 0x6f, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x72, 0x22, 0xbe, 0x01, 0x0a,
	0x38, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x69, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa1, 0x02,
	0x0a, 0x45, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20,
	0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x4c, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0b, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a,
	0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xf9, 0x01, 0x0a, 0x32, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x59, 0x92, 0xa6, 0x1d, 0x55, 0xa2, 0x01, 0x52, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x20, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x28, 0x69, 0x66, 0x20, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x20, 0x69,
	0x73, 0x20, 0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x20, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x29, 0x48, 0x00,
	0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xc7, 0x04,
	0x0a, 0x23, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x88, 0x01, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2,
	0x01, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48,
	0x02, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x7b,
	0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x24, 0x92, 0xa6, 0x1d, 0x20, 0xa2, 0x01,
	0x1d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x48, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x4a, 0x0a, 0x08, 0x52,
	0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x3e, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x62, 0x70, 0x73, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6b, 0x62, 0x70,
	0x73, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x62, 0x70, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x67, 0x62, 0x70, 0x73, 0x10, 0x04, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xc3, 0x05, 0x0a, 0x29, 0x43, 0x68, 0x61, 0x6f,
	0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0xa6, 0x1d, 0x14,
	0xa2, 0x01, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0xa6, 0x1d, 0x19,
	0xa2, 0x01, 0x16, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x49,
	0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0xa6,
	0x1d, 0x06, 0x52, 0x04, 0x31, 0x30, 0x32, 0x34, 0x92, 0xa6, 0x1d, 0x16, 0xa2, 0x01, 0x13, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x20, 0x34, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x02, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x49, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x29, 0x92, 0xa6, 0x1d, 0x06, 0x52, 0x04, 0x31, 0x30, 0x32, 0x34, 0x92, 0xa6,
	0x1d, 0x1b, 0xa2, 0x01, 0x18, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x34, 0x20, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x03, 0x52,
	0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0x92, 0xa6, 0x1d, 0x06, 0x52,
	0x04, 0x31, 0x30, 0x30, 0x30, 0x92, 0xa6, 0x1d, 0x14, 0xa2, 0x01, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x48, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x91, 0x01, 0x0a, 0x0b, 0x6c, 0x34, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6f, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x21, 0x92, 0xa6, 0x1d, 0x1d, 0xa2, 0x01,
	0x1a, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x34, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x05, 0x52, 0x0a, 0x6c,
	0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x1a, 0x37, 0x0a, 0x0a,
	0x4c, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x75, 0x64, 0x70, 0x10, 0x02, 0x3a, 0x23, 0x8a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6c, 0x34, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x41, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x57, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34,
	0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x22, 0xaf, 0x02, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x02, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0x67, 0x0a,
	0x14, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x34, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x65, 0x78,
	0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30,
	0x30, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x02, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x22, 0x5b, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x6e, 0x65, 0x78,
	0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x02, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x32, 0xcd, 0x04,
	0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x12, 0x76, 0x0a, 0x09, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0xa2, 0xa6, 0x1d, 0x22, 0x52,
	0x20, 0x53, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x4f, 0x4e, 0x45, 0x78, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x9f, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x1f, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4f, 0xa2, 0xa6, 0x1d, 0x4b, 0x52, 0x49, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x4f, 0x4e, 0x45, 0x78, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2e, 0xa2, 0xa6, 0x1d, 0x2a, 0x52, 0x28, 0x52, 0x75, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x76, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x20,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0xa2, 0xa6, 0x1d, 0x1f, 0x52, 0x1d, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
	0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x23, 0x9a, 0xa6, 0x1d, 0x1f, 0x52, 0x1d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x5d, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe1, 0xd4, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x3a, 0x5b, 0x0a, 0x08,
	0x66, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe2, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x46, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x66,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x3a, 0x5d, 0x0a, 0x08, 0x73, 0x76, 0x63,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe3, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x53, 0x76, 0x63, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x73, 0x76,
	0x63, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x3a, 0x5c, 0x0a, 0x08, 0x72, 0x70, 0x63, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe4, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x6e, 0x65, 0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x70, 0x69, 0x52, 0x70, 0x63, 0x4f, 0x70, 0x74, 0x52, 0x07, 0x72, 0x70, 0x63, 0x4d,
	0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x52, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6a, 0x62, 0x61, 0x6c, 0x6f, 0x67, 0x68, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x2f, 0x67, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6f, 0x6e, 0x65,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_onexdatamodel_proto_rawDescOnce sync.Once
	file_onexdatamodel_proto_rawDescData = file_onexdatamodel_proto_rawDesc
)

func file_onexdatamodel_proto_rawDescGZIP() []byte {
	file_onexdatamodel_proto_rawDescOnce.Do(func() {
		file_onexdatamodel_proto_rawDescData = protoimpl.X.CompressGZIP(file_onexdatamodel_proto_rawDescData)
	})
	return file_onexdatamodel_proto_rawDescData
}

var file_onexdatamodel_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_onexdatamodel_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_onexdatamodel_proto_goTypes = []interface{}{
	(Fabric_Choice_Enum)(0),                                              // 0: onexdatamodel.Fabric.Choice.Enum
	(FabricSpine_DownlinkEcmpMode_Enum)(0),                               // 1: onexdatamodel.FabricSpine.DownlinkEcmpMode.Enum
	(FabricPodSwitch_UplinkEcmpMode_Enum)(0),                             // 2: onexdatamodel.FabricPodSwitch.UplinkEcmpMode.Enum
	(FabricPodSwitch_DownlinkEcmpMode_Enum)(0),                           // 3: onexdatamodel.FabricPodSwitch.DownlinkEcmpMode.Enum
	(FabricRackProfile_TorUplinkEcmpMode_Enum)(0),                        // 4: onexdatamodel.FabricRackProfile.TorUplinkEcmpMode.Enum
	(FabricRackProfile_TorDownlinkEcmpMode_Enum)(0),                      // 5: onexdatamodel.FabricRackProfile.TorDownlinkEcmpMode.Enum
	(FabricQosProfileScheduler_SchedulerMode_Enum)(0),                    // 6: onexdatamodel.FabricQosProfileScheduler.SchedulerMode.Enum
	(SwitchHostLink_Choice_Enum)(0),                                      // 7: onexdatamodel.SwitchHostLink.Choice.Enum
	(DataflowFlowProfile_L2ProtocolChoice_Enum)(0),                       // 8: onexdatamodel.DataflowFlowProfile.L2ProtocolChoice.Enum
	(DataflowFlowProfile_L4ProtocolChoice_Enum)(0),                       // 9: onexdatamodel.DataflowFlowProfile.L4ProtocolChoice.Enum
	(DataflowFlowProfileTcp_CongestionAlgorithm_Enum)(0),                 // 10: onexdatamodel.DataflowFlowProfileTcp.CongestionAlgorithm.Enum
	(L4PortRange_Choice_Enum)(0),                                         // 11: onexdatamodel.L4PortRange.Choice.Enum
	(DataflowWorkloadItem_Choice_Enum)(0),                                // 12: onexdatamodel.DataflowWorkloadItem.Choice.Enum
	(DataflowAllReduceWorkload_Type_Enum)(0),                             // 13: onexdatamodel.DataflowAllReduceWorkload.Type.Enum
	(DataflowComputeWorkload_Choice_Enum)(0),                             // 14: onexdatamodel.DataflowComputeWorkload.Choice.Enum
	(ChaosBackgroundTrafficFlow_Choice_Enum)(0),                          // 15: onexdatamodel.ChaosBackgroundTrafficFlow.Choice.Enum
	(ChaosBackgroundTrafficFlowEntryPoint_Choice_Enum)(0),                // 16: onexdatamodel.ChaosBackgroundTrafficFlowEntryPoint.Choice.Enum
	(ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice_Enum)(0), // 17: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference.Choice.Enum
	(ChaosBackgroundTrafficFlowStateless_RateUnit_Enum)(0),               // 18: onexdatamodel.ChaosBackgroundTrafficFlowStateless.RateUnit.Enum
	(ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol_Enum)(0),       // 19: onexdatamodel.ChaosBackgroundTrafficFlowStatelessPacket.L4Protocol.Enum
	(*OpenApiMsgOpt)(nil),                                                // 20: onexdatamodel.OpenApiMsgOpt
	(*OpenApiFldOpt)(nil),                                                // 21: onexdatamodel.OpenApiFldOpt
	(*OpenApiSvcOpt)(nil),                                                // 22: onexdatamodel.OpenApiSvcOpt
	(*OpenApiRpcOpt)(nil),                                                // 23: onexdatamodel.OpenApiRpcOpt
	(*GlobalNamedObject)(nil),                                            // 24: onexdatamodel.GlobalNamedObject
	(*ErrorDetails)(nil),                                                 // 25: onexdatamodel.ErrorDetails
	(*WarningDetails)(nil),                                               // 26: onexdatamodel.WarningDetails
	(*ConfigRequest)(nil),                                                // 27: onexdatamodel.ConfigRequest
	(*ConfigResponse)(nil),                                               // 28: onexdatamodel.ConfigResponse
	(*ExperimentRequest)(nil),                                            // 29: onexdatamodel.ExperimentRequest
	(*MetricsRequest)(nil),                                               // 30: onexdatamodel.MetricsRequest
	(*MetricsResponse)(nil),                                              // 31: onexdatamodel.MetricsResponse
	(*MetricsResponseFlowResult)(nil),                                    // 32: onexdatamodel.MetricsResponseFlowResult
	(*MetricsResponseFlowResultTcpInfo)(nil),                             // 33: onexdatamodel.MetricsResponseFlowResultTcpInfo
	(*Config)(nil),                                                       // 34: onexdatamodel.Config
	(*Host)(nil),                                                         // 35: onexdatamodel.Host
	(*Fabric)(nil),                                                       // 36: onexdatamodel.Fabric
	(*FabricSpinePodRack)(nil),                                           // 37: onexdatamodel.FabricSpinePodRack
	(*FabricSpine)(nil),                                                  // 38: onexdatamodel.FabricSpine
	(*FabricPod)(nil),                                                    // 39: onexdatamodel.FabricPod
	(*FabricPodProfile)(nil),                                             // 40: onexdatamodel.FabricPodProfile
	(*FabricPodSwitch)(nil),                                              // 41: onexdatamodel.FabricPodSwitch
	(*FabricRack)(nil),                                                   // 42: onexdatamodel.FabricRack
	(*FabricRackProfile)(nil),                                            // 43: onexdatamodel.FabricRackProfile
	(*FabricQosProfile)(nil),                                             // 44: onexdatamodel.FabricQosProfile
	(*FabricQosProfileIngressAdmission)(nil),                             // 45: onexdatamodel.FabricQosProfileIngressAdmission
	(*FabricQosProfileScheduler)(nil),                                    // 46: onexdatamodel.FabricQosProfileScheduler
	(*FabricQosProfilePacketClassification)(nil),                         // 47: onexdatamodel.FabricQosProfilePacketClassification
	(*FabricQosProfilePacketClassificationMap)(nil),                      // 48: onexdatamodel.FabricQosProfilePacketClassificationMap
	(*SwitchHostLink)(nil),                                               // 49: onexdatamodel.SwitchHostLink
	(*SwitchHostLinkSwitchRef)(nil),                                      // 50: onexdatamodel.SwitchHostLinkSwitchRef
	(*Dataflow)(nil),                                                     // 51: onexdatamodel.Dataflow
	(*DataflowFlowProfile)(nil),                                          // 52: onexdatamodel.DataflowFlowProfile
	(*DataflowFlowProfileEthernet)(nil),                                  // 53: onexdatamodel.DataflowFlowProfileEthernet
	(*DataflowFlowProfileTcp)(nil),                                       // 54: onexdatamodel.DataflowFlowProfileTcp
	(*L4PortRange)(nil),                                                  // 55: onexdatamodel.L4PortRange
	(*L4PortRangeSingleValue)(nil),                                       // 56: onexdatamodel.L4PortRangeSingleValue
	(*L4PortRangeRange)(nil),                                             // 57: onexdatamodel.L4PortRangeRange
	(*DataflowFlowProfileUdp)(nil),                                       // 58: onexdatamodel.DataflowFlowProfileUdp
	(*DataflowWorkloadItem)(nil),                                         // 59: onexdatamodel.DataflowWorkloadItem
	(*DataflowScatterWorkload)(nil),                                      // 60: onexdatamodel.DataflowScatterWorkload
	(*DataflowBroadcastWorkload)(nil),                                    // 61: onexdatamodel.DataflowBroadcastWorkload
	(*DataflowGatherWorkload)(nil),                                       // 62: onexdatamodel.DataflowGatherWorkload
	(*DataflowAllReduceWorkload)(nil),                                    // 63: onexdatamodel.DataflowAllReduceWorkload
	(*DataflowComputeWorkload)(nil),                                      // 64: onexdatamodel.DataflowComputeWorkload
	(*DataflowSimulatedComputeWorkload)(nil),                             // 65: onexdatamodel.DataflowSimulatedComputeWorkload
	(*DataflowLoopWorkload)(nil),                                         // 66: onexdatamodel.DataflowLoopWorkload
	(*DataflowHostManagement)(nil),                                       // 67: onexdatamodel.DataflowHostManagement
	(*Chaos)(nil),                                                        // 68: onexdatamodel.Chaos
	(*ChaosBackgroundTraffic)(nil),                                       // 69: onexdatamodel.ChaosBackgroundTraffic
	(*ChaosBackgroundTrafficFlow)(nil),                                   // 70: onexdatamodel.ChaosBackgroundTrafficFlow
	(*ChaosBackgroundTrafficFlowEntryPoint)(nil),                         // 71: onexdatamodel.ChaosBackgroundTrafficFlowEntryPoint
	(*ChaosBackgroundTrafficFlowEntryPointSwitchReference)(nil),          // 72: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference
	(*ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine)(nil),     // 73: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine
	(*ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference)(nil), // 74: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference
	(*ChaosBackgroundTrafficFlowEntryPointFrontPanelPort)(nil),                    // 75: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointFrontPanelPort
	(*ChaosBackgroundTrafficFlowStateless)(nil),                                   // 76: onexdatamodel.ChaosBackgroundTrafficFlowStateless
	(*ChaosBackgroundTrafficFlowStatelessPacket)(nil),                             // 77: onexdatamodel.ChaosBackgroundTrafficFlowStatelessPacket
	(*SetConfigRequest)(nil),                                                      // 78: onexdatamodel.SetConfigRequest
	(*GetConfigRequest)(nil),                                                      // 79: onexdatamodel.GetConfigRequest
	(*SetConfigResponse)(nil),                                                     // 80: onexdatamodel.SetConfigResponse
	(*GetConfigResponse)(nil),                                                     // 81: onexdatamodel.GetConfigResponse
	(*RunExperimentRequest)(nil),                                                  // 82: onexdatamodel.RunExperimentRequest
	(*RunExperimentResponse)(nil),                                                 // 83: onexdatamodel.RunExperimentResponse
	(*GetMetricsRequest)(nil),                                                     // 84: onexdatamodel.GetMetricsRequest
	(*GetMetricsResponse)(nil),                                                    // 85: onexdatamodel.GetMetricsResponse
	(*Fabric_Choice)(nil),                                                         // 86: onexdatamodel.Fabric.Choice
	(*FabricSpine_DownlinkEcmpMode)(nil),                                          // 87: onexdatamodel.FabricSpine.DownlinkEcmpMode
	(*FabricPodSwitch_UplinkEcmpMode)(nil),                                        // 88: onexdatamodel.FabricPodSwitch.UplinkEcmpMode
	(*FabricPodSwitch_DownlinkEcmpMode)(nil),                                      // 89: onexdatamodel.FabricPodSwitch.DownlinkEcmpMode
	(*FabricRackProfile_TorUplinkEcmpMode)(nil),                                   // 90: onexdatamodel.FabricRackProfile.TorUplinkEcmpMode
	(*FabricRackProfile_TorDownlinkEcmpMode)(nil),                                 // 91: onexdatamodel.FabricRackProfile.TorDownlinkEcmpMode
	(*FabricQosProfileScheduler_SchedulerMode)(nil),                               // 92: onexdatamodel.FabricQosProfileScheduler.SchedulerMode
	(*SwitchHostLink_Choice)(nil),                                                 // 93: onexdatamodel.SwitchHostLink.Choice
	(*DataflowFlowProfile_L2ProtocolChoice)(nil),                                  // 94: onexdatamodel.DataflowFlowProfile.L2ProtocolChoice
	(*DataflowFlowProfile_L4ProtocolChoice)(nil),                                  // 95: onexdatamodel.DataflowFlowProfile.L4ProtocolChoice
	(*DataflowFlowProfileTcp_CongestionAlgorithm)(nil),                            // 96: onexdatamodel.DataflowFlowProfileTcp.CongestionAlgorithm
	(*L4PortRange_Choice)(nil),                                                    // 97: onexdatamodel.L4PortRange.Choice
	(*DataflowWorkloadItem_Choice)(nil),                                           // 98: onexdatamodel.DataflowWorkloadItem.Choice
	(*DataflowAllReduceWorkload_Type)(nil),                                        // 99: onexdatamodel.DataflowAllReduceWorkload.Type
	(*DataflowComputeWorkload_Choice)(nil),                                        // 100: onexdatamodel.DataflowComputeWorkload.Choice
	(*ChaosBackgroundTrafficFlow_Choice)(nil),                                     // 101: onexdatamodel.ChaosBackgroundTrafficFlow.Choice
	(*ChaosBackgroundTrafficFlowEntryPoint_Choice)(nil),                           // 102: onexdatamodel.ChaosBackgroundTrafficFlowEntryPoint.Choice
	(*ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice)(nil),            // 103: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference.Choice
	(*ChaosBackgroundTrafficFlowStateless_RateUnit)(nil),                          // 104: onexdatamodel.ChaosBackgroundTrafficFlowStateless.RateUnit
	(*ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol)(nil),                  // 105: onexdatamodel.ChaosBackgroundTrafficFlowStatelessPacket.L4Protocol
	(*descriptorpb.MessageOptions)(nil),                                           // 106: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),                                             // 107: google.protobuf.FieldOptions
	(*descriptorpb.ServiceOptions)(nil),                                           // 108: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),                                            // 109: google.protobuf.MethodOptions
}
var file_onexdatamodel_proto_depIdxs = []int32{
	34,  // 0: onexdatamodel.ConfigResponse.config:type_name -> onexdatamodel.Config
	32,  // 1: onexdatamodel.MetricsResponse.flow_results:type_name -> onexdatamodel.MetricsResponseFlowResult
	33,  // 2: onexdatamodel.MetricsResponseFlowResult.tcp_info:type_name -> onexdatamodel.MetricsResponseFlowResultTcpInfo
	35,  // 3: onexdatamodel.Config.hosts:type_name -> onexdatamodel.Host
	36,  // 4: onexdatamodel.Config.fabric:type_name -> onexdatamodel.Fabric
	51,  // 5: onexdatamodel.Config.dataflow:type_name -> onexdatamodel.Dataflow
	68,  // 6: onexdatamodel.Config.chaos:type_name -> onexdatamodel.Chaos
	0,   // 7: onexdatamodel.Fabric.choice:type_name -> onexdatamodel.Fabric.Choice.Enum
	37,  // 8: onexdatamodel.Fabric.spine_pod_rack:type_name -> onexdatamodel.FabricSpinePodRack
	44,  // 9: onexdatamodel.Fabric.qos_profiles:type_name -> onexdatamodel.FabricQosProfile
	38,  // 10: onexdatamodel.FabricSpinePodRack.spines:type_name -> onexdatamodel.FabricSpine
	39,  // 11: onexdatamodel.FabricSpinePodRack.pods:type_name -> onexdatamodel.FabricPod
	49,  // 12: onexdatamodel.FabricSpinePodRack.host_links:type_name -> onexdatamodel.SwitchHostLink
	40,  // 13: onexdatamodel.FabricSpinePodRack.pod_profiles:type_name -> onexdatamodel.FabricPodProfile
	43,  // 14: onexdatamodel.FabricSpinePodRack.rack_profiles:type_name -> onexdatamodel.FabricRackProfile
	1,   // 15: onexdatamodel.FabricSpine.downlink_ecmp_mode:type_name -> onexdatamodel.FabricSpine.DownlinkEcmpMode.Enum
	41,  // 16: onexdatamodel.FabricPodProfile.pod_switch:type_name -> onexdatamodel.FabricPodSwitch
	42,  // 17: onexdatamodel.FabricPodProfile.rack:type_name -> onexdatamodel.FabricRack
	2,   // 18: onexdatamodel.FabricPodSwitch.uplink_ecmp_mode:type_name -> onexdatamodel.FabricPodSwitch.UplinkEcmpMode.Enum
	3,   // 19: onexdatamodel.FabricPodSwitch.downlink_ecmp_mode:type_name -> onexdatamodel.FabricPodSwitch.DownlinkEcmpMode.Enum
	4,   // 20: onexdatamodel.FabricRackProfile.tor_uplink_ecmp_mode:type_name -> onexdatamodel.FabricRackProfile.TorUplinkEcmpMode.Enum
	5,   // 21: onexdatamodel.FabricRackProfile.tor_downlink_ecmp_mode:type_name -> onexdatamodel.FabricRackProfile.TorDownlinkEcmpMode.Enum
	45,  // 22: onexdatamodel.FabricQosProfile.ingress_admission:type_name -> onexdatamodel.FabricQosProfileIngressAdmission
	46,  // 23: onexdatamodel.FabricQosProfile.scheduler:type_name -> onexdatamodel.FabricQosProfileScheduler
	47,  // 24: onexdatamodel.FabricQosProfile.packet_classification:type_name -> onexdatamodel.FabricQosProfilePacketClassification
	6,   // 25: onexdatamodel.FabricQosProfileScheduler.scheduler_mode:type_name -> onexdatamodel.FabricQosProfileScheduler.SchedulerMode.Enum
	48,  // 26: onexdatamodel.FabricQosProfilePacketClassification.map_dscp_to_traffic_class:type_name -> onexdatamodel.FabricQosProfilePacketClassificationMap
	48,  // 27: onexdatamodel.FabricQosProfilePacketClassification.map_traffic_class_to_queue:type_name -> onexdatamodel.FabricQosProfilePacketClassificationMap
	7,   // 28: onexdatamodel.SwitchHostLink.choice:type_name -> onexdatamodel.SwitchHostLink.Choice.Enum
	50,  // 29: onexdatamodel.SwitchHostLink.pod:type_name -> onexdatamodel.SwitchHostLinkSwitchRef
	50,  // 30: onexdatamodel.SwitchHostLink.rack:type_name -> onexdatamodel.SwitchHostLinkSwitchRef
	67,  // 31: onexdatamodel.Dataflow.host_management:type_name -> onexdatamodel.DataflowHostManagement
	59,  // 32: onexdatamodel.Dataflow.workload:type_name -> onexdatamodel.DataflowWorkloadItem
	52,  // 33: onexdatamodel.Dataflow.flow_profiles:type_name -> onexdatamodel.DataflowFlowProfile
	8,   // 34: onexdatamodel.DataflowFlowProfile.l2_protocol_choice:type_name -> onexdatamodel.DataflowFlowProfile.L2ProtocolChoice.Enum
	53,  // 35: onexdatamodel.DataflowFlowProfile.ethernet:type_name -> onexdatamodel.DataflowFlowProfileEthernet
	9,   // 36: onexdatamodel.DataflowFlowProfile.l4_protocol_choice:type_name -> onexdatamodel.DataflowFlowProfile.L4ProtocolChoice.Enum
	54,  // 37: onexdatamodel.DataflowFlowProfile.tcp:type_name -> onexdatamodel.DataflowFlowProfileTcp
	58,  // 38: onexdatamodel.DataflowFlowProfile.udp:type_name -> onexdatamodel.DataflowFlowProfileUdp
	10,  // 39: onexdatamodel.DataflowFlowProfileTcp.congestionalgorithm:type_name -> onexdatamodel.DataflowFlowProfileTcp.CongestionAlgorithm.Enum
	55,  // 40: onexdatamodel.DataflowFlowProfileTcp.destinationport:type_name -> onexdatamodel.L4PortRange
	55,  // 41: onexdatamodel.DataflowFlowProfileTcp.sourceport:type_name -> onexdatamodel.L4PortRange
	11,  // 42: onexdatamodel.L4PortRange.choice:type_name -> onexdatamodel.L4PortRange.Choice.Enum
	56,  // 43: onexdatamodel.L4PortRange.single_value:type_name -> onexdatamodel.L4PortRangeSingleValue
	57,  // 44: onexdatamodel.L4PortRange.range:type_name -> onexdatamodel.L4PortRangeRange
	12,  // 45: onexdatamodel.DataflowWorkloadItem.choice:type_name -> onexdatamodel.DataflowWorkloadItem.Choice.Enum
	60,  // 46: onexdatamodel.DataflowWorkloadItem.scatter:type_name -> onexdatamodel.DataflowScatterWorkload
	62,  // 47: onexdatamodel.DataflowWorkloadItem.gather:type_name -> onexdatamodel.DataflowGatherWorkload
	66,  // 48: onexdatamodel.DataflowWorkloadItem.loop:type_name -> onexdatamodel.DataflowLoopWorkload
	64,  // 49: onexdatamodel.DataflowWorkloadItem.compute:type_name -> onexdatamodel.DataflowComputeWorkload
	63,  // 50: onexdatamodel.DataflowWorkloadItem.all_reduce:type_name -> onexdatamodel.DataflowAllReduceWorkload
	61,  // 51: onexdatamodel.DataflowWorkloadItem.broadcast:type_name -> onexdatamodel.DataflowBroadcastWorkload
	13,  // 52: onexdatamodel.DataflowAllReduceWorkload.type:type_name -> onexdatamodel.DataflowAllReduceWorkload.Type.Enum
	14,  // 53: onexdatamodel.DataflowComputeWorkload.choice:type_name -> onexdatamodel.DataflowComputeWorkload.Choice.Enum
	65,  // 54: onexdatamodel.DataflowComputeWorkload.simulated:type_name -> onexdatamodel.DataflowSimulatedComputeWorkload
	59,  // 55: onexdatamodel.DataflowLoopWorkload.children:type_name -> onexdatamodel.DataflowWorkloadItem
	69,  // 56: onexdatamodel.Chaos.background_traffic:type_name -> onexdatamodel.ChaosBackgroundTraffic
	70,  // 57: onexdatamodel.ChaosBackgroundTraffic.flows:type_name -> onexdatamodel.ChaosBackgroundTrafficFlow
	71,  // 58: onexdatamodel.ChaosBackgroundTrafficFlow.fabric_entry_point:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowEntryPoint
	15,  // 59: onexdatamodel.ChaosBackgroundTrafficFlow.choice:type_name -> onexdatamodel.ChaosBackgroundTrafficFlow.Choice.Enum
	76,  // 60: onexdatamodel.ChaosBackgroundTrafficFlow.stateless:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowStateless
	16,  // 61: onexdatamodel.ChaosBackgroundTrafficFlowEntryPoint.choice:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowEntryPoint.Choice.Enum
	72,  // 62: onexdatamodel.ChaosBackgroundTrafficFlowEntryPoint.switch_reference:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference
	75,  // 63: onexdatamodel.ChaosBackgroundTrafficFlowEntryPoint.front_panel_port:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowEntryPointFrontPanelPort
	17,  // 64: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference.choice:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference.Choice.Enum
	73,  // 65: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference.spine:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine
	74,  // 66: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference.pod:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference
	74,  // 67: onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReference.tor:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference
	18,  // 68: onexdatamodel.ChaosBackgroundTrafficFlowStateless.rate_unit:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowStateless.RateUnit.Enum
	77,  // 69: onexdatamodel.ChaosBackgroundTrafficFlowStateless.packet:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowStatelessPacket
	19,  // 70: onexdatamodel.ChaosBackgroundTrafficFlowStatelessPacket.l4_protocol:type_name -> onexdatamodel.ChaosBackgroundTrafficFlowStatelessPacket.L4Protocol.Enum
	34,  // 71: onexdatamodel.SetConfigRequest.config:type_name -> onexdatamodel.Config
	27,  // 72: onexdatamodel.GetConfigRequest.config_request:type_name -> onexdatamodel.ConfigRequest
	25,  // 73: onexdatamodel.SetConfigResponse.status_code_400:type_name -> onexdatamodel.ErrorDetails
	25,  // 74: onexdatamodel.SetConfigResponse.status_code_500:type_name -> onexdatamodel.ErrorDetails
	26,  // 75: onexdatamodel.SetConfigResponse.status_code_200:type_name -> onexdatamodel.WarningDetails
	28,  // 76: onexdatamodel.GetConfigResponse.status_code_200:type_name -> onexdatamodel.ConfigResponse
	25,  // 77: onexdatamodel.GetConfigResponse.status_code_400:type_name -> onexdatamodel.ErrorDetails
	25,  // 78: onexdatamodel.GetConfigResponse.status_code_500:type_name -> onexdatamodel.ErrorDetails
	29,  // 79: onexdatamodel.RunExperimentRequest.experiment_request:type_name -> onexdatamodel.ExperimentRequest
	25,  // 80: onexdatamodel.RunExperimentResponse.status_code_400:type_name -> onexdatamodel.ErrorDetails
	25,  // 81: onexdatamodel.RunExperimentResponse.status_code_500:type_name -> onexdatamodel.ErrorDetails
	26,  // 82: onexdatamodel.RunExperimentResponse.status_code_200:type_name -> onexdatamodel.WarningDetails
	30,  // 83: onexdatamodel.GetMetricsRequest.metrics_request:type_name -> onexdatamodel.MetricsRequest
	31,  // 84: onexdatamodel.GetMetricsResponse.status_code_200:type_name -> onexdatamodel.MetricsResponse
	25,  // 85: onexdatamodel.GetMetricsResponse.status_code_400:type_name -> onexdatamodel.ErrorDetails
	25,  // 86: onexdatamodel.GetMetricsResponse.status_code_500:type_name -> onexdatamodel.ErrorDetails
	106, // 87: onexdatamodel.msg_meta:extendee -> google.protobuf.MessageOptions
	107, // 88: onexdatamodel.fld_meta:extendee -> google.protobuf.FieldOptions
	108, // 89: onexdatamodel.svc_meta:extendee -> google.protobuf.ServiceOptions
	109, // 90: onexdatamodel.rpc_meta:extendee -> google.protobuf.MethodOptions
	20,  // 91: onexdatamodel.msg_meta:type_name -> onexdatamodel.OpenApiMsgOpt
	21,  // 92: onexdatamodel.fld_meta:type_name -> onexdatamodel.OpenApiFldOpt
	22,  // 93: onexdatamodel.svc_meta:type_name -> onexdatamodel.OpenApiSvcOpt
	23,  // 94: onexdatamodel.rpc_meta:type_name -> onexdatamodel.OpenApiRpcOpt
	78,  // 95: onexdatamodel.Openapi.SetConfig:input_type -> onexdatamodel.SetConfigRequest
	79,  // 96: onexdatamodel.Openapi.GetConfig:input_type -> onexdatamodel.GetConfigRequest
	82,  // 97: onexdatamodel.Openapi.RunExperiment:input_type -> onexdatamodel.RunExperimentRequest
	84,  // 98: onexdatamodel.Openapi.GetMetrics:input_type -> onexdatamodel.GetMetricsRequest
	80,  // 99: onexdatamodel.Openapi.SetConfig:output_type -> onexdatamodel.SetConfigResponse
	81,  // 100: onexdatamodel.Openapi.GetConfig:output_type -> onexdatamodel.GetConfigResponse
	83,  // 101: onexdatamodel.Openapi.RunExperiment:output_type -> onexdatamodel.RunExperimentResponse
	85,  // 102: onexdatamodel.Openapi.GetMetrics:output_type -> onexdatamodel.GetMetricsResponse
	99,  // [99:103] is the sub-list for method output_type
	95,  // [95:99] is the sub-list for method input_type
	91,  // [91:95] is the sub-list for extension type_name
	87,  // [87:91] is the sub-list for extension extendee
	0,   // [0:87] is the sub-list for field type_name
}

func init() { file_onexdatamodel_proto_init() }
func file_onexdatamodel_proto_init() {
	if File_onexdatamodel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_onexdatamodel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiMsgOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiFldOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiSvcOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenApiRpcOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalNamedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponseFlowResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponseFlowResultTcpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fabric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricSpinePodRack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricSpine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricPod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricPodProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricPodSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricRack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricRackProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricQosProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricQosProfileIngressAdmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricQosProfileScheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricQosProfilePacketClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricQosProfilePacketClassificationMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchHostLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchHostLinkSwitchRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dataflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfileEthernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfileTcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L4PortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L4PortRangeSingleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L4PortRangeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfileUdp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowWorkloadItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowScatterWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowBroadcastWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowGatherWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowAllReduceWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowComputeWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowSimulatedComputeWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowLoopWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowHostManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chaos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowEntryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowEntryPointSwitchReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowEntryPointSwitchReferenceSpine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowEntryPointSwitchReferencePodSwitchReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowEntryPointFrontPanelPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowStateless); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowStatelessPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fabric_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricSpine_DownlinkEcmpMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricPodSwitch_UplinkEcmpMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricPodSwitch_DownlinkEcmpMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricRackProfile_TorUplinkEcmpMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricRackProfile_TorDownlinkEcmpMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricQosProfileScheduler_SchedulerMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchHostLink_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfile_L2ProtocolChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfile_L4ProtocolChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowFlowProfileTcp_CongestionAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L4PortRange_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowWorkloadItem_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowAllReduceWorkload_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataflowComputeWorkload_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlow_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowEntryPoint_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowEntryPointSwitchReference_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowStateless_RateUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_onexdatamodel_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaosBackgroundTrafficFlowStatelessPacket_L4Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_onexdatamodel_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_onexdatamodel_proto_msgTypes[65].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_onexdatamodel_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   86,
			NumExtensions: 4,
			NumServices:   1,
		},
		GoTypes:           file_onexdatamodel_proto_goTypes,
		DependencyIndexes: file_onexdatamodel_proto_depIdxs,
		EnumInfos:         file_onexdatamodel_proto_enumTypes,
		MessageInfos:      file_onexdatamodel_proto_msgTypes,
		ExtensionInfos:    file_onexdatamodel_proto_extTypes,
	}.Build()
	File_onexdatamodel_proto = out.File
	file_onexdatamodel_proto_rawDesc = nil
	file_onexdatamodel_proto_goTypes = nil
	file_onexdatamodel_proto_depIdxs = nil
}
